{
  "swagger" : "2.0",
  "info" : {
    "version" : "20.3.397",
    "title" : "Foundation API"
  },
  "basePath" : "/ctfrest/foundation/v1",
  "tags" : [ {
    "name" : "Application Configuration"
  }, {
    "name" : "Approval Requests"
  }, {
    "name" : "Associations"
  }, {
    "name" : "Auditing"
  }, {
    "name" : "Comments"
  }, {
    "name" : "Delivery Info"
  }, {
    "name" : "Integration Data"
  }, {
    "name" : "Monitor"
  }, {
    "name" : "Permission"
  }, {
    "name" : "Project Group Membership"
  }, {
    "name" : "Project Groups"
  }, {
    "name" : "Project Membership"
  }, {
    "name" : "Project Templates"
  }, {
    "name" : "Project Tools"
  }, {
    "name" : "Projects"
  }, {
    "name" : "Recent Activities"
  }, {
    "name" : "Role Membership"
  }, {
    "name" : "Roles"
  }, {
    "name" : "Server"
  }, {
    "name" : "User Group Membership"
  }, {
    "name" : "User Groups"
  }, {
    "name" : "Users"
  }, {
    "name" : "v20.3"
  } ],
  "paths" : {
    "/appconfiguration" : {
      "patch" : {
        "tags" : [ "Application Configuration" ],
        "summary" : "Updates configuration properties",
        "description" : "",
        "operationId" : "setConfigurations",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of configuration properties",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchConfigurations"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/appconfiguration/by-name/{configname}" : {
      "get" : {
        "tags" : [ "Application Configuration" ],
        "summary" : "Get value for specified configuration property",
        "description" : "",
        "operationId" : "getValueForSpecifiedConfigurationProperty",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "configname",
          "in" : "path",
          "description" : "configname",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAppConfigValue"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid Configuration Name",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/appconfiguration/by-name/{configname}/value" : {
      "patch" : {
        "tags" : [ "Application Configuration" ],
        "summary" : "Updates the configuration value",
        "description" : "",
        "operationId" : "updateConfigurationValue",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "configname",
          "in" : "path",
          "description" : "configname",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Update the configuration value",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid Configuration Name",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/approval-requests/summary" : {
      "get" : {
        "tags" : [ "Approval Requests" ],
        "summary" : "Gets a summary of pending approval requests on TF server",
        "description" : "",
        "operationId" : "getApprovalRequestSummary",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "query",
          "description" : "Project identifier",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ServerApprovalRequestSummary"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      }
    },
    "/associations" : {
      "get" : {
        "tags" : [ "Associations" ],
        "summary" : "Gets the association information for the given object/activity ids",
        "description" : "includePhantoms: Flag to include phantom (un-'settled') events. This parameter is relevant only if TeamForge events are included.\n\ntimeout: Timeout value for Event server. This parameter is relevant only if TeamForge events are included. Values:\n\n   negative: Use the value configured for TeamForge (default),\n\n   0: Use framework's default value (i.e. no timeout is set),\n\n   positive: Use the provided value (in seconds).\n\n",
        "operationId" : "getAssociations",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "ids",
          "in" : "query",
          "description" : "Comma separated object ids",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "Number of levels",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "maximum" : 5,
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "includeDependencies",
          "in" : "query",
          "description" : "Include dependency associations (parent and child)",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "includeEvents",
          "in" : "query",
          "description" : "Include events",
          "required" : false,
          "type" : "boolean",
          "default" : true,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "includePhantoms",
          "in" : "query",
          "description" : "Include phantom events",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of generic associations for an object",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "maximum" : 500,
          "minimum" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Associations"
            }
          },
          "400" : {
            "description" : "No object ids, invalid depth/limit value"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          },
          "503" : {
            "description" : "Connection timed-out (Event Server)"
          }
        }
      }
    },
    "/groups" : {
      "get" : {
        "tags" : [ "User Groups" ],
        "summary" : "Gets paginated user group list",
        "description" : "",
        "operationId" : "getUserGroups",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "id",
          "enum" : [ "id", "fullName" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of groups to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User groups"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid sort by column name"
          }
        }
      },
      "post" : {
        "tags" : [ "User Groups" ],
        "summary" : "Creates user group",
        "description" : "",
        "operationId" : "createUserGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New user group data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostUserGroup"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserGroupEntity"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "format" : "uri",
                "description" : "Group endpoint"
              }
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          }
        }
      }
    },
    "/groups/by-name/{name}" : {
      "get" : {
        "tags" : [ "User Groups" ],
        "summary" : "Gets group data by fullname",
        "description" : "",
        "operationId" : "getItemByName",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Group's full name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserGroupEntity"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Group version"
              }
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid group name"
          }
        }
      }
    },
    "/groups/{groupid}" : {
      "get" : {
        "tags" : [ "User Groups" ],
        "summary" : "Gets group data by id",
        "description" : "",
        "operationId" : "getUserGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "group(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserGroupEntity"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Group version"
              }
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid group identifier"
          }
        }
      },
      "delete" : {
        "tags" : [ "User Groups" ],
        "summary" : "Deletes group data by id",
        "description" : "",
        "operationId" : "deleteUserGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "group(\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "User group is deleted"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid group identifier"
          }
        }
      },
      "patch" : {
        "tags" : [ "User Groups" ],
        "summary" : "Updates group data by id",
        "description" : "",
        "operationId" : "updateUserGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated user group info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchUserGroup"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Group version",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "group(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetUserGroupEntity"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Group version"
              }
            }
          },
          "304" : {
            "description" : "Group data is up to date."
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid group identifier"
          },
          "409" : {
            "description" : "Conflict"
          },
          "412" : {
            "description" : "Missing If-Match header"
          }
        }
      }
    },
    "/groups/{groupid}/members" : {
      "get" : {
        "tags" : [ "User Group Membership" ],
        "summary" : "Gets usergroup members",
        "description" : "",
        "operationId" : "getUserGroupMembers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "group(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Group members"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid group identifier"
          }
        }
      }
    },
    "/groups/{groupid}/members/{username}" : {
      "put" : {
        "tags" : [ "User Group Membership" ],
        "summary" : "Adds a user to usergroup",
        "description" : "",
        "operationId" : "addUserGroupMember",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "group(\\d+)"
        }, {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "User is added to the group succesfully"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user id/group identifier"
          }
        }
      },
      "delete" : {
        "tags" : [ "User Group Membership" ],
        "summary" : "Removes a user from usergroup",
        "description" : "",
        "operationId" : "removeUserGroupMember",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "group(\\d+)"
        }, {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "User is removed from the group"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid group identifier"
          }
        }
      }
    },
    "/integrationdata/by-objectid/{objectid}/by-name/{namespace}" : {
      "get" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Gets integration data for an object by namespace name",
        "description" : "",
        "operationId" : "getIntegrationDataByName",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "Namespace name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "dataname",
          "in" : "query",
          "description" : "Data name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IntegrationData"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Insufficient permission"
          },
          "404" : {
            "description" : "Invalid object id, namespace/data name"
          }
        }
      },
      "put" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Sets integration data for an object by namespace name",
        "description" : "",
        "operationId" : "setIntegrationDataByName",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Integration data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IntegrationData"
          }
        }, {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "Namespace name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "createNamespace",
          "in" : "query",
          "description" : "Create namespace if missing?",
          "required" : true,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "204" : {
            "description" : "Data is added/updated successfully"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Insufficient permission"
          },
          "404" : {
            "description" : "Invalid object id/namespace name"
          }
        }
      },
      "delete" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Removes integration data for an object by namespace name",
        "description" : "",
        "operationId" : "removeIntegrationDataByName",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "Namespace name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "dataname",
          "in" : "query",
          "description" : "Data name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Data is removed successfully"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Insufficient permission"
          },
          "404" : {
            "description" : "Invalid object id, namespace/data name"
          }
        }
      }
    },
    "/integrationdata/by-objectid/{objectid}/{namespaceid}" : {
      "get" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Gets integration data for an object by namespace id",
        "description" : "",
        "operationId" : "getIntegrationData",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "namespaceid",
          "in" : "path",
          "description" : "Namespace id",
          "required" : true,
          "type" : "string",
          "pattern" : "indn(\\d+)"
        }, {
          "name" : "dataname",
          "in" : "query",
          "description" : "Data name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IntegrationData"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Insufficient permission"
          },
          "404" : {
            "description" : "Invalid object/namespace id, data name"
          }
        }
      },
      "put" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Sets integration data for an object by namespace id",
        "description" : "",
        "operationId" : "setIntegrationData",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Integration data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IntegrationData"
          }
        }, {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "namespaceid",
          "in" : "path",
          "description" : "Namespace id",
          "required" : true,
          "type" : "string",
          "pattern" : "indn(\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "Data is added/updated successfully"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Insufficient permission"
          },
          "404" : {
            "description" : "Invalid object/namespace id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Removes integration data for an object by namespace id",
        "description" : "",
        "operationId" : "removeIntegrationData",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "namespaceid",
          "in" : "path",
          "description" : "Namespace id",
          "required" : true,
          "type" : "string",
          "pattern" : "indn(\\d+)"
        }, {
          "name" : "dataname",
          "in" : "query",
          "description" : "Data name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Data is removed successfully"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "403" : {
            "description" : "Insufficient permission"
          },
          "404" : {
            "description" : "Invalid object/namespace id, data name"
          }
        }
      }
    },
    "/integrationdata/myself/by-name/{namespace}" : {
      "get" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Gets integration data for current user by namespace name",
        "description" : "",
        "operationId" : "getMyIntegrationDataByName",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "Namespace name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "dataname",
          "in" : "query",
          "description" : "Data name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IntegrationData"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Invalid namespace/data name"
          }
        }
      },
      "put" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Sets integration data for current user by namespace name",
        "description" : "",
        "operationId" : "setMyIntegrationDataByName",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Integration data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IntegrationData"
          }
        }, {
          "name" : "namespace",
          "in" : "path",
          "description" : "Namespace name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "createNamespace",
          "in" : "query",
          "description" : "Create namespace if missing?",
          "required" : true,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "204" : {
            "description" : "Data is added/updated successfully"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Invalid namespace name"
          }
        }
      },
      "delete" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Removes integration data for current user by namespace name",
        "description" : "",
        "operationId" : "removeMyIntegrationDataByName",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "Namespace name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "dataname",
          "in" : "query",
          "description" : "Data name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Data is removed successfully"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Invalid namespace/data name"
          }
        }
      }
    },
    "/integrationdata/myself/{namespaceid}" : {
      "get" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Gets integration data for current user by namespace id",
        "description" : "",
        "operationId" : "getMyIntegrationData",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "namespaceid",
          "in" : "path",
          "description" : "Namespace id",
          "required" : true,
          "type" : "string",
          "pattern" : "indn(\\d+)"
        }, {
          "name" : "dataname",
          "in" : "query",
          "description" : "Data name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/IntegrationData"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Invalid namespace id/data name"
          }
        }
      },
      "put" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Sets integration data for current user by namespace id",
        "description" : "",
        "operationId" : "setMyIntegrationData",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Integration data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IntegrationData"
          }
        }, {
          "name" : "namespaceid",
          "in" : "path",
          "description" : "Namespace id",
          "required" : true,
          "type" : "string",
          "pattern" : "indn(\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "Data is added/updated successfully"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Invalid namespace id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Removes integration data for current user by namespace id",
        "description" : "",
        "operationId" : "removeMyIntegrationData",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "namespaceid",
          "in" : "path",
          "description" : "Namespace id",
          "required" : true,
          "type" : "string",
          "pattern" : "indn(\\d+)"
        }, {
          "name" : "dataname",
          "in" : "query",
          "description" : "Data name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Data is removed successfully"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Invalid namespace id, data name"
          }
        }
      }
    },
    "/integrationdata/namespaces" : {
      "post" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Registers namespace",
        "description" : "",
        "operationId" : "registerNamespace",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Namespace",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Namespace"
            }
          },
          "400" : {
            "description" : "Namespace already exists"
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/integrationdata/namespaces/by-name/{namespace}" : {
      "get" : {
        "tags" : [ "Integration Data" ],
        "summary" : "Gets namespace info by name",
        "description" : "",
        "operationId" : "getNamespaceByName",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "description" : "Namespace name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Namespace"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "No such namespace"
          }
        }
      }
    },
    "/monitoring/objects/{objectid}/users" : {
      "get" : {
        "tags" : [ "Monitor" ],
        "summary" : "Returns the list of monitoring users for the object(Folder/Item).",
        "description" : "",
        "operationId" : "listUsersForObject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of monitoring users to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 15,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of users for the object",
            "schema" : {
              "$ref" : "#/definitions/MonitoringUsers"
            }
          },
          "400" : {
            "description" : "Invalid data"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      }
    },
    "/monitoring/users/by-username/{username}/objects" : {
      "get" : {
        "tags" : [ "Monitor" ],
        "summary" : "Returns the list of monitoring items for the given username",
        "description" : "",
        "operationId" : "monitoringItemsForUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectid",
          "in" : "query",
          "description" : "Project Id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of monitoring items to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 15,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of monitoring items for the user",
            "schema" : {
              "$ref" : "#/definitions/MonitoredObjects"
            }
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      },
      "post" : {
        "tags" : [ "Monitor" ],
        "summary" : "Monitors / Unmonitors the list of objects for the given username",
        "description" : "",
        "operationId" : "monitorOrUnmonitorObjectsByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Monitor / Unmonitor items",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MonitorItems"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "To perform action",
          "required" : true,
          "type" : "string",
          "default" : "monitor",
          "enum" : [ "monitor", "unmonitor" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Monitored / Unmonitored the current objects successfully."
          }
        }
      }
    },
    "/monitoring/users/by-username/{username}/objects/{objectid}" : {
      "get" : {
        "tags" : [ "Monitor" ],
        "summary" : "Monitoring the current object or not for the given username (true / false)",
        "description" : "",
        "operationId" : "isObjectMonitoredByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns boolean if the object is being monitored or not",
            "schema" : {
              "type" : "boolean"
            }
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      },
      "post" : {
        "tags" : [ "Monitor" ],
        "summary" : "Monitors the current object for the given username.",
        "description" : "",
        "operationId" : "monitorObjectByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Monitored the current object successfully"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Monitor" ],
        "summary" : "UnMonitors the current object for the given username.",
        "description" : "",
        "operationId" : "unMonitorObjectByuser",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Unmonitored the object successfully"
          },
          "304" : {
            "description" : "Not Modified"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      }
    },
    "/monitoring/users/myself/objects" : {
      "get" : {
        "tags" : [ "Monitor" ],
        "summary" : "Returns the list of monitoring items for current user",
        "description" : "",
        "operationId" : "monitoringItemsForUser",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "query",
          "description" : "Project id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of monitoring items to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 15,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of monitoring items for the current user",
            "schema" : {
              "$ref" : "#/definitions/MonitoredObjects"
            }
          },
          "404" : {
            "description" : "Invalid project id"
          }
        }
      },
      "post" : {
        "tags" : [ "Monitor" ],
        "summary" : "Monitors / Unmonitors the list of objects for current user.",
        "description" : "",
        "operationId" : "monitorOrUnmonitorObjectsForUser",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Monitor / Unmonitor items",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MonitorItems"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "To perform action",
          "required" : true,
          "type" : "string",
          "default" : "monitor",
          "enum" : [ "monitor", "unmonitor" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Monitored / Unmonitored the current objects successfully."
          }
        }
      }
    },
    "/monitoring/users/myself/objects/{objectid}" : {
      "get" : {
        "tags" : [ "Monitor" ],
        "summary" : "The logged in user is monitoring the current object or not (true / false)",
        "description" : "",
        "operationId" : "isObjectMonitored",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns boolean if the object is being monitored or not",
            "schema" : {
              "type" : "boolean"
            }
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      },
      "post" : {
        "tags" : [ "Monitor" ],
        "summary" : "Monitors the current object for current user.",
        "description" : "",
        "operationId" : "monitorObjectForUser",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Monitored the current object successfully"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Monitor" ],
        "summary" : "UnMonitors the current object for the current user,",
        "description" : "",
        "operationId" : "unMonitorObject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Unmonitored the object successfully"
          },
          "304" : {
            "description" : "Not Modified"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      }
    },
    "/monitoring/users/{userid}/objects" : {
      "get" : {
        "tags" : [ "Monitor" ],
        "summary" : "Returns the list of monitoring items for the given userid",
        "description" : "",
        "operationId" : "monitorSubforUserId",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "name" : "projectid",
          "in" : "query",
          "description" : "Project Id",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of monitoring items to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 15,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of monitoring items for the user",
            "schema" : {
              "$ref" : "#/definitions/MonitoredObjects"
            }
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      },
      "post" : {
        "tags" : [ "Monitor" ],
        "summary" : "Monitors / Unmonitors the list of objects for the given userid.",
        "description" : "",
        "operationId" : "monitorOrUnmonitorObjectsByUserid",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Monitor / Unmonitor items",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MonitorItems"
          }
        }, {
          "name" : "action",
          "in" : "query",
          "description" : "To perform action",
          "required" : true,
          "type" : "string",
          "default" : "monitor",
          "enum" : [ "monitor", "unmonitor" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Monitored / Unmonitored the current objects successfully."
          }
        }
      }
    },
    "/monitoring/users/{userid}/objects/{objectid}" : {
      "get" : {
        "tags" : [ "Monitor" ],
        "summary" : "Monitoring the current object or not for the given user id (true / false)",
        "description" : "",
        "operationId" : "isObjectMonitoredByUserid",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns boolean if the object is being monitored or not",
            "schema" : {
              "type" : "boolean"
            }
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      },
      "post" : {
        "tags" : [ "Monitor" ],
        "summary" : "Monitors the current object for the given userid.",
        "description" : "",
        "operationId" : "monitorObjectByUserid",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Monitored the current object successfully"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Monitor" ],
        "summary" : "UnMonitors the current object for given userid",
        "description" : "",
        "operationId" : "unMonitorObjectByid",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Unmonitored the object successfully"
          },
          "304" : {
            "description" : "Not Modified"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      }
    },
    "/myself/recent/objects" : {
      "get" : {
        "tags" : [ "Recent Activities" ],
        "summary" : "Gets recent object list for the current user",
        "description" : "",
        "operationId" : "getMyRecentObjects",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of objects to be returned",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "minimum" : 1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecentObjects"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/myself/recent/projects" : {
      "get" : {
        "tags" : [ "Recent Activities" ],
        "summary" : "Gets recent project list for the current user",
        "description" : "",
        "operationId" : "getMyRecentProjects",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of projects to be returned",
          "required" : false,
          "type" : "integer",
          "default" : 5,
          "minimum" : 1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/RecentProjects"
            }
          },
          "401" : {
            "description" : "Unauthorized"
          }
        }
      }
    },
    "/objects/{artifactId}/comments/{commentId}/edit" : {
      "post" : {
        "tags" : [ "Comments" ],
        "summary" : "Edit a comment added by the same user, on the given artifact id",
        "description" : "",
        "operationId" : "editComment",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "artifactId",
          "in" : "path",
          "description" : "Artifact id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:artf(?:\\d{4,}))"
        }, {
          "name" : "commentId",
          "in" : "path",
          "description" : "Comment id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:cmnt(?:\\d{4,}))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Comment",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Invalid comment"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          },
          "405" : {
            "description" : "Editing comments on the specified object is not allowed"
          }
        }
      }
    },
    "/objects/{objectid}/associations" : {
      "get" : {
        "tags" : [ "Associations" ],
        "summary" : "Gets the association information for the given object id",
        "description" : "includePhantoms: Flag to include phantom (un-'settled') events. This parameter is relevant only if TeamForge events are included.\n\ntimeout: Timeout value for Event server. This parameter is relevant only if TeamForge events are included. Values:\n\n   negative: Use the value configured for TeamForge (default),\n\n   0: Use framework's default value (i.e. no timeout is set),\n\n   positive: Use the provided value (in seconds).\n\n",
        "operationId" : "getObjectAssociations",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object/Activity id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "Number of levels",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "maximum" : 5,
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "includeDependencies",
          "in" : "query",
          "description" : "Include dependency associations (parent and child)",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "includeEvents",
          "in" : "query",
          "description" : "Include events",
          "required" : false,
          "type" : "boolean",
          "default" : true,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "includePhantoms",
          "in" : "query",
          "description" : "Include phantom events",
          "required" : false,
          "type" : "boolean",
          "default" : false,
          "enum" : [ "true", "false" ]
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Maximum number of generic associations for an object",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "maximum" : 500,
          "minimum" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Associations"
            }
          },
          "400" : {
            "description" : "No object ids, invalid depth/limit value"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          },
          "503" : {
            "description" : "Connection timed-out (Event Server)"
          }
        }
      }
    },
    "/objects/{objectid}/associations/{targetid}" : {
      "put" : {
        "tags" : [ "Associations" ],
        "summary" : "Creates association",
        "description" : "",
        "operationId" : "createAssociation",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Association parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CreateAssociationEntity"
          }
        }, {
          "name" : "objectid",
          "in" : "path",
          "description" : "Origin object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "targetid",
          "in" : "path",
          "description" : "Target object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Association is created successfully."
          },
          "400" : {
            "description" : "Attempt to create association with a Review"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid origin/target object id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Associations" ],
        "summary" : "Deletes association",
        "description" : "",
        "operationId" : "deleteAssociation",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Origin object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "targetid",
          "in" : "path",
          "description" : "Target object id",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Association is deleted."
          },
          "400" : {
            "description" : "Attempt to delete a Review association"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid origin/target object id"
          }
        }
      }
    },
    "/objects/{objectid}/auditlog" : {
      "get" : {
        "tags" : [ "Auditing" ],
        "summary" : "Gets a collection of audit transactions performed on the specified TeamForge object",
        "description" : "",
        "operationId" : "getAuditLog",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of transactions to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AuditTransactionsEntity"
            }
          },
          "403" : {
            "description" : "No permission to view the object"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      }
    },
    "/objects/{objectid}/comments" : {
      "get" : {
        "tags" : [ "Comments" ],
        "summary" : "Gets the comments on the given object id",
        "description" : "",
        "operationId" : "getObjectComments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "dateCreated",
          "enum" : [ "id", "objectId", "dateCreated", "transactionId" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of comments to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Success",
            "schema" : {
              "$ref" : "#/definitions/Comments"
            }
          },
          "400" : {
            "description" : "Invalid sort by column"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          }
        }
      },
      "post" : {
        "tags" : [ "Comments" ],
        "summary" : "Posts a comment on the given object id",
        "description" : "",
        "operationId" : "postComment",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Comment",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "400" : {
            "description" : "Invalid comment"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id"
          },
          "405" : {
            "description" : "Posting comments on the specified object is not allowed"
          }
        }
      }
    },
    "/objects/{objectid}/delivery" : {
      "get" : {
        "tags" : [ "Delivery Info" ],
        "summary" : "Gets delivery information for the given object",
        "description" : "",
        "operationId" : "getObjectDeliveryInfo",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "Object id(commit or artifact)",
          "required" : true,
          "type" : "string",
          "pattern" : "(artf|cmmt)(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Delivery manifest"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid object id or delivery server configuration"
          }
        }
      }
    },
    "/objects/{objectid}/permissions" : {
      "get" : {
        "tags" : [ "Permission", "v20.3" ],
        "summary" : "Get whether a user can perform requested operation(s) on TeamForge objects",
        "description" : "Use '*' as objectid to determine site-wide permissions.\nDefault operation is 'view' when 'operation' query param is not provided.\nThe accepted operation formats are:\n  - {application}.{objectType}.{operationCategory}.{operationName}\n  - {objectType}.{operationCategory}.{operationName}\n  - {operationCategory}.{operationName}\n  - {operationName}\n\nWhen 'objectType' is not provided, it will be derived from the given object id. For example: if 'objectid' is 'artf1234' and operation parameter is 'view.view', then the operation is 'Tracker.Artifact.view.view'.\n\nWhen only 'operationName' is provided as operation query param, then it will be assumed that 'operationCategory' is same as 'operationName'.\n'view' -> 'view.view'.\n\nExamples:\n  - '/objects/*/permissions?operation=User.create.create'\n  - '/objects/proj1234/permissions?operation=admin'\n  - '/objects/proj1234/permissions?operation=Artifact.edit.edit,Tracker.create.createArtifact'\n  - '/objects/tracker1234/permissions?operation=Artifact.edit.edit,create.createArtifact'\n  - '/objects/artf1234,artf5678/permissions?operation=view,edit,delete'\n\nThe response is a map of operation to map of object to boolean. For example:\nthe response for '/objects/tracker1234,tracker5678/permissions?operation=Artifact.edit.edit,create.createArtifact' is:\n\n<pre>{\n  \"Artifact.edit.edit\": {\n    \"tracker1234\": true,\n    \"tracker5678\": false,\n  },\n  \"create.createArtifact\": {\n    \"tracker1234\": true,\n    \"tracker5678\": false,\n  }\n}\n</pre>\n\n<div><b>Since:</b><br><br>&nbsp;&nbsp;&nbsp;&nbsp;20.3</div><br>",
        "operationId" : "hasPermissionOnObject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "objectid",
          "in" : "path",
          "description" : "TeamForge object ids separated by comma. Null value indicates site-wide permission check",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "operation",
          "in" : "query",
          "description" : "String representation of operations separated by comma. Format: <objectTypeName>.<operationCategory>.<operationName>",
          "required" : false,
          "type" : "string",
          "default" : "view"
        }, {
          "name" : "username",
          "in" : "query",
          "description" : "Username to check permission for. Default is the calling user",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "400" : {
            "description" : "Invalid operation"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "No such object/object type/user"
          }
        }
      }
    },
    "/permission/{projectid}/{folderPath}/baseline" : {
      "get" : {
        "tags" : [ "Permission" ],
        "summary" : "Check Baseline Permission for given project",
        "description" : "",
        "operationId" : "check baseline permission",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectPath",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "folderPath",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "boolean"
            }
          },
          "400" : {
            "description" : "Invalid type parameter"
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project id",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projectgroups" : {
      "get" : {
        "tags" : [ "Project Groups" ],
        "summary" : "Gets paginated project group list",
        "description" : "",
        "operationId" : "getProjectGroups",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "dateCreated",
          "enum" : [ "id", "title", "dateCreated" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of project groups to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Project Groups"
            }
          },
          "500" : {
            "description" : "Invalid sort by column name"
          }
        }
      },
      "post" : {
        "tags" : [ "Project Groups" ],
        "summary" : "Creates project group",
        "description" : "",
        "operationId" : "createProjectGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New project group data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostProjectGroup"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Project group is created successfully."
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid project group name, project group already exists"
          }
        }
      }
    },
    "/projectgroups/{projectgroupid}" : {
      "get" : {
        "tags" : [ "Project Groups" ],
        "summary" : "Gets project group information",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "getProjectGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Project group"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Project version"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Project Groups" ],
        "summary" : "Deletes a project group",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "deleteProjectGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        }, {
          "name" : "force",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "204" : {
            "description" : "Project group is deleted."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project group identifier"
          }
        }
      },
      "patch" : {
        "tags" : [ "Project Groups" ],
        "summary" : "Updates project group data",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "updateProjectGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated project group info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchProjectGroup"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Project version",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectgroupid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Project group"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Project group version"
              }
            }
          },
          "304" : {
            "description" : "Project group data is up to date."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project group identifier"
          },
          "409" : {
            "description" : "Conflict"
          },
          "412" : {
            "description" : "Missing If-Match header"
          }
        }
      }
    },
    "/projectgroups/{projectgroupid}/admins" : {
      "get" : {
        "tags" : [ "Project Group Membership" ],
        "summary" : "Gets project group admins",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "getProjectGroupAdmins",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetProjectGroupMembersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project group identifier"
          }
        }
      }
    },
    "/projectgroups/{projectgroupid}/admins/{username}" : {
      "put" : {
        "tags" : [ "Project Group Membership" ],
        "summary" : "Adds project group admin",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "addProjectGroupAdmin",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project group admin is added"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username/project group identifier"
          }
        }
      },
      "delete" : {
        "tags" : [ "Project Group Membership" ],
        "summary" : "Removes project group admin",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "removeProjectGroupAdmin",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Project group admin is removed"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username/project group identifier"
          }
        }
      }
    },
    "/projectgroups/{projectgroupid}/members" : {
      "get" : {
        "tags" : [ "Project Group Membership" ],
        "summary" : "Gets project group members",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "getProjectGroupMembers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetProjectGroupMembersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project group identifier"
          }
        }
      }
    },
    "/projectgroups/{projectgroupid}/members/{username}" : {
      "put" : {
        "tags" : [ "Project Group Membership" ],
        "summary" : "Adds project group member",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "addProjectGroupMember",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project group member is added"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username/project group identifier"
          }
        }
      },
      "delete" : {
        "tags" : [ "Project Group Membership" ],
        "summary" : "Removes project group member",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "removeProjectGroupMember",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Project group member is removed"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username/project group identifier"
          }
        }
      }
    },
    "/projectgroups/{projectgroupid}/projects" : {
      "get" : {
        "tags" : [ "Project Group Membership" ],
        "summary" : "Gets project group projects",
        "description" : "Project group identifier can be either projectId, or project path.",
        "operationId" : "getProjectGroupProjects",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Project group associations"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project group identifier"
          }
        }
      }
    },
    "/projectgroups/{projectgroupid}/projects/{projectid}" : {
      "put" : {
        "tags" : [ "Project Group Membership" ],
        "summary" : "Adds project to project group",
        "description" : "Project group and project identifiers can be either projectId, or project path.",
        "operationId" : "addProjectToGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project is added"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project/project group identifier"
          }
        }
      },
      "delete" : {
        "tags" : [ "Project Group Membership" ],
        "summary" : "Removes project from group",
        "description" : "Project group and project identifiers can be either projectId, or project path.",
        "operationId" : "removeProjectFromGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectgroupid",
          "in" : "path",
          "description" : "Project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(pgroups\\.[-a-z0-9_]+))"
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "204" : {
            "description" : "Project is removed"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project/project group identifier"
          }
        }
      }
    },
    "/projects" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets paginated project list.",
        "description" : "The list includes only the projects for which the current user has permission to view.",
        "operationId" : "getProjects",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "dateCreated",
          "enum" : [ "id", "title", "dateCreated" ]
        }, {
          "name" : "fetchHierarchyPath",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of projects to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        }, {
          "name" : "searchvalue",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Projects"
            }
          },
          "500" : {
            "description" : "Invalid sort by column name"
          }
        }
      },
      "post" : {
        "tags" : [ "Projects" ],
        "summary" : "Creates project",
        "description" : "",
        "operationId" : "createProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New project data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostProject"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Project is created successfully."
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid project name, project already exists, invalid template"
          }
        }
      }
    },
    "/projects/requests" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets paginated project request list",
        "description" : "",
        "operationId" : "getProjectRequests",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of project requests to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Project Requests"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/requests/count" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets the number of pending project requests",
        "description" : "",
        "operationId" : "getProjectRequestCount",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "integer",
              "format" : "int32"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets project information",
        "description" : "Project identifier can be either projectId, or project path.",
        "operationId" : "getProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Project"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Project version"
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Projects" ],
        "summary" : "Deletes a project",
        "description" : "Project identifier can be either projectId, or project path.",
        "operationId" : "deleteItem",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "notify",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : true
        }, {
          "name" : "force",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "204" : {
            "description" : "Project is deleted."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project identifier"
          }
        }
      },
      "patch" : {
        "tags" : [ "Projects" ],
        "summary" : "Updates project data",
        "description" : "Project identifier can be either projectId, or project path.",
        "operationId" : "updateProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated project info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchProject"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Project version",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Project"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Project version"
              }
            }
          },
          "304" : {
            "description" : "Project data is up to date."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project identifier"
          },
          "409" : {
            "description" : "Conflict"
          },
          "412" : {
            "description" : "Missing If-Match header"
          }
        }
      }
    },
    "/projects/{projectid}/admins" : {
      "get" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Gets project administrators",
        "description" : "",
        "operationId" : "getProjectAdmins",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetProjectMembersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project identifier"
          }
        }
      }
    },
    "/projects/{projectid}/diskusage" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets project disk usage in bytes",
        "description" : "Project identifier can be either projectId, or project path.",
        "operationId" : "getProjectDiskUsage",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        }
      }
    },
    "/projects/{projectid}/lock" : {
      "put" : {
        "tags" : [ "Projects" ],
        "summary" : "Locks a project",
        "description" : "Project identifier can be either projectId, or project path.",
        "operationId" : "lockProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project is locked."
          },
          "304" : {
            "description" : "Project is already locked."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project identifier"
          }
        }
      },
      "delete" : {
        "tags" : [ "Projects" ],
        "summary" : "Unlocks a project",
        "description" : "Project identifier can be either projectId, or project path.",
        "operationId" : "unlockProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project is unlocked."
          },
          "304" : {
            "description" : "Project is already unlocked."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project identifier"
          }
        }
      }
    },
    "/projects/{projectid}/members" : {
      "get" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Gets project members",
        "description" : "",
        "operationId" : "getProjectMembers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "offset",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of project members to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        }, {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sorting column name. If '-' is prefixed to column name, it sorts by descending order, else ascending order",
          "required" : false,
          "type" : "string",
          "default" : "fullName"
        }, {
          "name" : "searchvalue",
          "in" : "query",
          "description" : "Filter value for project member name",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetProjectMembersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project identifier"
          }
        }
      }
    },
    "/projects/{projectid}/roles" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets project role list",
        "description" : "",
        "operationId" : "getProjectRoles",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project or project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "name" : "includeInherited",
          "in" : "query",
          "description" : "Include inherited roles? This parameter is relevant for 'Project' type only",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Collection of role objects"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Roles" ],
        "summary" : "Creates project role.",
        "description" : "",
        "operationId" : "createProjectRole",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project or project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "New role data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostRole"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Role is created successfully.",
            "schema" : {
              "$ref" : "#/definitions/Role"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/roles/inherited-roles" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets inherited project role list",
        "description" : "",
        "operationId" : "getInheritedProjectRoles",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Collection of role objects"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/roles/{roleid}" : {
      "delete" : {
        "tags" : [ "Roles" ],
        "summary" : "Deletes a project role",
        "description" : "",
        "operationId" : "deleteProjectRole",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project or project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "name" : "roleid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "role(\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "Role is deleted."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project/project role identifier"
          }
        }
      },
      "patch" : {
        "tags" : [ "Roles" ],
        "summary" : "Updates project role.",
        "description" : "",
        "operationId" : "updateProjectRole",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated role info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchRole"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Role version",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project or project group identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Role"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "format" : "uri",
                "description" : "Role version"
              }
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project/project role",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/roles/{roleid}/auto-grant" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets whether a role is granted automatically in a project or not.",
        "description" : "",
        "operationId" : "isRoleAutoGrantInProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(?:\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "boolean"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project/role",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Roles" ],
        "summary" : "Grant a role automatically in a given project",
        "description" : "",
        "operationId" : "autoGrantRoleInProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(?:\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "Role will be granted automatically"
          },
          "304" : {
            "description" : "Not modified"
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project/role",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "415" : {
            "description" : "Not supported for site roles",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Roles" ],
        "summary" : "Stop granting a role automatically in a given project",
        "description" : "",
        "operationId" : "removeAutoGrantRoleInProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(?:\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "Auto-grant flag is removed"
          },
          "304" : {
            "description" : "Not modified"
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project/role",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/roles/{roleid}/members" : {
      "get" : {
        "tags" : [ "Role Membership" ],
        "summary" : "Gets project role members",
        "description" : "",
        "operationId" : "getProjectRoleMembers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(?:\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Collection of users"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project/role",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/roles/{roleid}/members/{username}" : {
      "put" : {
        "tags" : [ "Role Membership" ],
        "summary" : "Add user to project role",
        "description" : "",
        "operationId" : "addUserToProjectRole",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(?:\\d+)"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "User is added to the role"
          },
          "400" : {
            "description" : "User is already a member",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project/role/user",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "415" : {
            "description" : "Not supported for site roles",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Role Membership" ],
        "summary" : "Removes user from a project role",
        "description" : "",
        "operationId" : "removeUserFromProjectRole",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(?:(?:projects|pgroups)\\.[-a-z0-9_]+))"
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(?:\\d+)"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "User is removed from the role"
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project/role/user",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/subprojects" : {
      "get" : {
        "tags" : [ "Projects" ],
        "summary" : "Gets subproject list.",
        "description" : "Project identifier can be either projectId, or project path.",
        "operationId" : "getSubprojects",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "dateCreated",
          "enum" : [ "id", "title", "dateCreated" ]
        }, {
          "name" : "fetchHierarchyPath",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Collection of projects"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project identifier"
          },
          "500" : {
            "description" : "Invalid sort by column name"
          }
        }
      }
    },
    "/projects/{projectid}/{username}" : {
      "put" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Adds project member",
        "description" : "",
        "operationId" : "addProjectMember",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Project member is added"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username/project identifier"
          }
        }
      },
      "delete" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Removes project member",
        "description" : "",
        "operationId" : "removeProjectMember",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Project member is removed"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username/project identifier"
          }
        }
      }
    },
    "/projecttemplates" : {
      "get" : {
        "tags" : [ "Project Templates" ],
        "summary" : "Gets paginated project template list.",
        "description" : "",
        "operationId" : "getProjectTemplates",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "dateCreated",
          "enum" : [ "id", "title", "dateCreated" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of project templates to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Projects"
            }
          },
          "500" : {
            "description" : "Invalid sort by column name"
          }
        }
      }
    },
    "/roles" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets global/site role list",
        "description" : "",
        "operationId" : "getRoles",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Role type",
          "required" : false,
          "type" : "string",
          "default" : "Global",
          "enum" : [ "Global", "Site" ]
        }, {
          "name" : "projectId",
          "in" : "query",
          "description" : "Context project id (to verify access permissions)",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Collection of role objects"
            }
          },
          "400" : {
            "description" : "Invalid type parameter"
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Roles" ],
        "summary" : "Creates role.",
        "description" : "",
        "operationId" : "createRole",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New role data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostRole"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Role is created successfully.",
            "schema" : {
              "$ref" : "#/definitions/Role"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/roles/{roleid}" : {
      "get" : {
        "tags" : [ "Roles" ],
        "summary" : "Gets role data.",
        "description" : "",
        "operationId" : "getRole",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Role"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Role data version"
              }
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such role",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Roles" ],
        "summary" : "Deletes a role",
        "description" : "",
        "operationId" : "deleteRole",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roleid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "role(\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "Role is deleted."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid role identifier"
          }
        }
      },
      "patch" : {
        "tags" : [ "Roles" ],
        "summary" : "Updates role.",
        "description" : "",
        "operationId" : "updateRole",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated role info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchRole"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Role version",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Role"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "format" : "uri",
                "description" : "Role endpoint"
              }
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such role",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/roles/{roleid}/members" : {
      "get" : {
        "tags" : [ "Role Membership" ],
        "summary" : "Gets role members",
        "description" : "",
        "operationId" : "getRoleMembers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Collection of users"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such role",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "415" : {
            "description" : "Not supported for global roles",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/roles/{roleid}/members/{username}" : {
      "put" : {
        "tags" : [ "Role Membership" ],
        "summary" : "Add user to a role",
        "description" : "",
        "operationId" : "addRoleMember",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(\\d+)"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "User is added to the role"
          },
          "400" : {
            "description" : "User is already a member",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such role/user",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Role Membership" ],
        "summary" : "Removes user from a role",
        "description" : "",
        "operationId" : "removeRoleMember",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "roleid",
          "in" : "path",
          "description" : "Role identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "role(\\d+)"
        }, {
          "name" : "username",
          "in" : "path",
          "description" : "username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "User is removed from the role"
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such role/user",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "415" : {
            "description" : "Not supported for global roles",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/server" : {
      "get" : {
        "tags" : [ "Server" ],
        "summary" : "Gets TeamForge server information",
        "description" : "",
        "operationId" : "getTeamForgeServerInfo",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/TFServer"
            }
          }
        }
      }
    },
    "/server/broadcast-message" : {
      "put" : {
        "tags" : [ "Server" ],
        "summary" : "Sets/Updates broadcast message",
        "description" : "<div><b>Since:</b><br><br>&nbsp;&nbsp;&nbsp;&nbsp;20.1</div><br><br>Empty parameter will remove the existing broadcast message",
        "operationId" : "storeBroadcastMessage",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Broadcast Message",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "hide",
          "in" : "query",
          "description" : "Whether allow users to turn off this message or not",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "204" : {
            "description" : "Broadcast message is set"
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    },
    "/server/health" : {
      "get" : {
        "tags" : [ "Server" ],
        "summary" : "Gets the health of the CTF core",
        "description" : "",
        "operationId" : "getHealth",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "verbose",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "thorough",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "assumeactive",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/server/licensekey" : {
      "put" : {
        "tags" : [ "Server" ],
        "summary" : "Sets/Updates license key",
        "description" : "Empty parameter will remove the existing license key.",
        "operationId" : "enterLicenseKey",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "License key",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "License key is set."
          },
          "304" : {
            "description" : "License key is not modified."
          },
          "400" : {
            "description" : "Invalid license key/license key format."
          },
          "500" : {
            "description" : "Internal server error."
          }
        }
      }
    },
    "/server/licensetypes" : {
      "get" : {
        "tags" : [ "Server" ],
        "summary" : "Gets valid license types",
        "description" : "",
        "operationId" : "getLicenseTypes",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/tools/enable/baseline" : {
      "patch" : {
        "tags" : [ "Project Tools" ],
        "summary" : "Enable baseline for given projects.",
        "description" : "",
        "operationId" : "enableBaseline",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Project Ids",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "500" : {
            "description" : "System error",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets paginated user list",
        "description" : "This method returns the intersection of users with the specified <strong>status</strong> (all users if not specified) and the union of the users matching <strong>ids</strong>, <strong>names</strong>, <strong>search</strong> parameters (all users if not specified).<br>The <strong>count</strong> and <strong>offset</strong> parameters are ignored if only <strong>names</strong> and/or <strong>ids</strong> parameters are specified.",
        "operationId" : "getUsers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "dateCreated",
          "enum" : [ "id", "dateCreated", "fullName", "username" ]
        }, {
          "name" : "ids",
          "in" : "query",
          "description" : "List of user ids (separated by comma)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "names",
          "in" : "query",
          "description" : "List of usernames (separated by comma)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Comma separated terms to search in username, fullname fields",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "User status",
          "required" : false,
          "type" : "string",
          "enum" : [ "Pending", "Active", "Disabled", "Removed" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of users to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Users"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid sort by column name"
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Creates a user",
        "description" : "",
        "operationId" : "createUser",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New user information",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostUser"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "User is created.",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid password/username"
          }
        }
      }
    },
    "/users/by-email/{email}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets user data by email",
        "description" : "",
        "operationId" : "getUserByEmail",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid email"
          }
        }
      }
    },
    "/users/by-username/{username}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets user data by username",
        "description" : "",
        "operationId" : "getUserByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "User data version"
              }
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Deletes a user by username",
        "description" : "",
        "operationId" : "deleteUserByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "User is removed."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Updates a user by username",
        "description" : "",
        "operationId" : "updateUserByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated user info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchUser"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "User version",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          },
          "409" : {
            "description" : "Conflict"
          },
          "412" : {
            "description" : "Missing If-Match header"
          }
        }
      }
    },
    "/users/by-username/{username}/alternative-licensetypes" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets alternative license types by username.",
        "description" : "",
        "operationId" : "getLicenseByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GetLicenseEntity"
              }
            }
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      }
    },
    "/users/by-username/{username}/authorization-keys" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets authorization keys by username",
        "description" : "",
        "operationId" : "getAuthorizationKeysByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAuthorizationKeysEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Sets authorization keys by username",
        "description" : "",
        "operationId" : "setAuthorizationKeys",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Authorization keys",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostAuthorizationKeys"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Authorization keys are set"
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      }
    },
    "/users/by-username/{username}/groups" : {
      "get" : {
        "tags" : [ "User Group Membership" ],
        "summary" : "Gets a user's group list by username",
        "description" : "",
        "operationId" : "getUserGroupsByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User's Groups"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user id"
          }
        }
      }
    },
    "/users/by-username/{username}/groups/{groupid}" : {
      "put" : {
        "tags" : [ "User Group Membership" ],
        "summary" : "Add user to a user group by user name",
        "description" : "",
        "operationId" : "addUserToGroupByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "groupid",
          "in" : "path",
          "description" : "Group id",
          "required" : true,
          "type" : "string",
          "pattern" : "group(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "User is added to the group"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user name/group id"
          }
        }
      }
    },
    "/users/by-username/{username}/password" : {
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Resets user password by username",
        "description" : "",
        "operationId" : "resetPasswordByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "New password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Password is reset."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          },
          "500" : {
            "description" : "Invalid password"
          }
        }
      }
    },
    "/users/by-username/{username}/preferences" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets preferences by username",
        "description" : "",
        "operationId" : "getPreferences",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GetPreferenceEntity"
              }
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Sets preferences by user name",
        "description" : "",
        "operationId" : "setPreferences",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Preferences",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchPreferences"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      }
    },
    "/users/by-username/{username}/preferences/{preference}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets preference by username",
        "description" : "Currently known user preferences include 'monitorNotification', 'monitoringCcSelf', 'EncodingInExport').",
        "operationId" : "getPreference",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "preference",
          "in" : "path",
          "description" : "Preference",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetPreferenceEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username, Invalid preference"
          }
        }
      }
    },
    "/users/by-username/{username}/profile-picture" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Uploads and sets profile picture by username",
        "description" : "To test in Swagger UI, do not copy the Model Schema JSON to the body.  Instead, set the body to something like this:\n\n<pre>--4321MyBoundary\nContent-Disposition: form-data; name=\"picture\"; filename=\"profile.png\"\nContent-Type: image/png\nContent-Transfer-Encoding: base64\n\n<…picture content in base64…>\n--4321MyBoundary--</pre>\n\n When using the API outside of Swagger, the boundary can be any value that does not also appear in the base64-encoded file content.  The boundary specified in the Content-Type request header should match the boundary used in the request body.  For example, if '4321MyBoundary' is used in the request body, then the header is:\n\n<pre>Content-Type: multipart/form-data; boundary=4321MyBoundary</pre>",
        "operationId" : "setProfilePictureByUsername",
        "consumes" : [ "multipart/form-data; boundary=4321MyBoundary" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Picture",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormDataInput"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Profile picture is set",
            "schema" : {
              "$ref" : "#/definitions/GuidKey"
            }
          },
          "400" : {
            "description" : "Missing picture, wrong picture Content-Type, picture too large"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Deletes profile picture by username",
        "description" : "",
        "operationId" : "deleteProfilePictureByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Profile picture is deleted"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      }
    },
    "/users/by-username/{username}/projects" : {
      "get" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Gets a user's project list by username",
        "description" : "",
        "operationId" : "getProjectsByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "dateCreated",
          "enum" : [ "id", "title", "dateCreated" ]
        }, {
          "name" : "fetchHierarchyPath",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Collection of projects"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          }
        }
      }
    },
    "/users/by-username/{username}/projects/{projectid}" : {
      "put" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Adds a user to specified project's member list by username",
        "description" : "",
        "operationId" : "addUserByUsername",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "Username",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project id",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "User is added to the project succesfully"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user name/project identifier"
          }
        }
      }
    },
    "/users/myself" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets user data for current user",
        "description" : "",
        "operationId" : "getMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Updates current user data",
        "description" : "",
        "operationId" : "updateMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated user info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchUser"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "User version",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "409" : {
            "description" : "Conflict"
          },
          "412" : {
            "description" : "Missing If-Match header"
          }
        }
      }
    },
    "/users/myself/alternative-licensetypes" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets alternative license types for current user.",
        "description" : "",
        "operationId" : "getLicenseForMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GetLicenseEntity"
              }
            }
          }
        }
      }
    },
    "/users/myself/authorization-keys" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets authorization keys for current user",
        "description" : "",
        "operationId" : "getAuthorizationKeysForMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAuthorizationKeysEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Sets authorization keys for current user",
        "description" : "",
        "operationId" : "setAuthorizationKeysForMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Authorization keys",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostAuthorizationKeys"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Authorization keys are set"
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          }
        }
      }
    },
    "/users/myself/groups" : {
      "get" : {
        "tags" : [ "User Group Membership" ],
        "summary" : "Gets current user's group list",
        "description" : "",
        "operationId" : "getMyUserGroups",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User's Groups"
            }
          },
          "403" : {
            "description" : "Permission denied"
          }
        }
      }
    },
    "/users/myself/groups/{groupid}" : {
      "put" : {
        "tags" : [ "User Group Membership" ],
        "summary" : "Add current user to a user group",
        "description" : "",
        "operationId" : "addMyselfToGroup",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "groupid",
          "in" : "path",
          "description" : "Group id",
          "required" : true,
          "type" : "string",
          "pattern" : "group(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "User is added to the group"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user name/group id"
          }
        }
      }
    },
    "/users/myself/password" : {
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Resets user password for current user",
        "description" : "",
        "operationId" : "resetPasswordForMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Password is reset."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid password"
          }
        }
      }
    },
    "/users/myself/preferences" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets preferences for current user",
        "description" : "",
        "operationId" : "getPreferencesForMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GetPreferenceEntity"
              }
            }
          },
          "403" : {
            "description" : "Permission denied"
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Sets preferences for current user",
        "description" : "",
        "operationId" : "setPreferencesForMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Preferences",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchPreferences"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Permission denied"
          }
        }
      }
    },
    "/users/myself/preferences/{preference}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets preference for current user",
        "description" : "Currently known user preferences include 'monitorNotification', 'monitoringCcSelf', 'EncodingInExport').",
        "operationId" : "getPreferenceForMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "preference",
          "in" : "path",
          "description" : "Preference",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetPreferenceEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid preference"
          }
        }
      }
    },
    "/users/myself/profile-picture" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Uploads and sets profile picture for current user",
        "description" : "To test in Swagger UI, do not copy the Model Schema JSON to the body.  Instead, set the body to something like this:\n\n<pre>--4321MyBoundary\nContent-Disposition: form-data; name=\"picture\"; filename=\"profile.png\"\nContent-Type: image/png\nContent-Transfer-Encoding: base64\n\n<…picture content in base64…>\n--4321MyBoundary--</pre>\n\n When using the API outside of Swagger, the boundary can be any value that does not also appear in the base64-encoded file content.  The boundary specified in the Content-Type request header should match the boundary used in the request body.  For example, if '4321MyBoundary' is used in the request body, then the header is:\n\n<pre>Content-Type: multipart/form-data; boundary=4321MyBoundary</pre>",
        "operationId" : "setProfilePictureForMyself",
        "consumes" : [ "multipart/form-data; boundary=4321MyBoundary" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Picture",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormDataInput"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Profile picture is set",
            "schema" : {
              "$ref" : "#/definitions/GuidKey"
            }
          },
          "400" : {
            "description" : "Missing picture, wrong picture Content-Type, picture too large"
          },
          "403" : {
            "description" : "Permission denied"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Deletes profile picture for current user",
        "description" : "",
        "operationId" : "deleteProfilePictureForMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "204" : {
            "description" : "Profile picture is deleted"
          },
          "403" : {
            "description" : "Permission denied"
          }
        }
      }
    },
    "/users/myself/projects" : {
      "get" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Gets current user's project list",
        "description" : "",
        "operationId" : "getMyProjects",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "dateCreated",
          "enum" : [ "id", "title", "dateCreated" ]
        }, {
          "name" : "fetchHierarchyPath",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Collection of projects"
            }
          },
          "403" : {
            "description" : "Permission denied"
          }
        }
      }
    },
    "/users/myself/projects/{projectid}" : {
      "put" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Adds current user to specified project's member list",
        "description" : "",
        "operationId" : "addMyself",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project id",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "You are added to the project succesfully"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project identifier"
          }
        }
      }
    },
    "/users/{userid}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets user data by user id",
        "description" : "",
        "operationId" : "getUserById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "User data version"
              }
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user id"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Deletes a user by user id",
        "description" : "",
        "operationId" : "deleteUserById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "User is removed."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user id"
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Updates a user by user id",
        "description" : "",
        "operationId" : "updateUserById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated user info",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchUser"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "User version",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "userid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid username"
          },
          "409" : {
            "description" : "Conflict"
          },
          "412" : {
            "description" : "Missing If-Match header"
          }
        }
      }
    },
    "/users/{userid}/alternative-licensetypes" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets alternative license types by userid.",
        "description" : "",
        "operationId" : "getLicenseById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GetLicenseEntity"
              }
            }
          },
          "404" : {
            "description" : "Invalid userid"
          }
        }
      }
    },
    "/users/{userid}/authorization-keys" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets authorization keys by user id",
        "description" : "",
        "operationId" : "getAuthorizationKeysById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetAuthorizationKeysEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid userid"
          }
        }
      },
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Sets authorization keys by user id",
        "description" : "",
        "operationId" : "setAuthorizationKeysById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Authorization keys",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostAuthorizationKeys"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Authorization keys are set"
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid userid"
          }
        }
      }
    },
    "/users/{userid}/groups" : {
      "get" : {
        "tags" : [ "User Group Membership" ],
        "summary" : "Gets a user's group list by user id",
        "description" : "",
        "operationId" : "getUserGroupsByUserid",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User's Groups"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user id"
          }
        }
      }
    },
    "/users/{userid}/groups/{groupid}" : {
      "put" : {
        "tags" : [ "User Group Membership" ],
        "summary" : "Add user to a user group by user id",
        "description" : "",
        "operationId" : "addUserToGroupByUserid",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "name" : "groupid",
          "in" : "path",
          "description" : "Group id",
          "required" : true,
          "type" : "string",
          "pattern" : "group(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "User is added to the group"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user/group id"
          }
        }
      }
    },
    "/users/{userid}/password" : {
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Resets user password by userid",
        "description" : "",
        "operationId" : "resetPasswordById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "New password",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Password is reset."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid userid"
          },
          "500" : {
            "description" : "Invalid password"
          }
        }
      }
    },
    "/users/{userid}/preferences" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets preferences by user id",
        "description" : "",
        "operationId" : "getPreferencesById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/GetPreferenceEntity"
              }
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid userid"
          }
        }
      },
      "patch" : {
        "tags" : [ "Users" ],
        "summary" : "Sets preferences by user id",
        "description" : "",
        "operationId" : "setPreferencesById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Preferences",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchPreferences"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid userid"
          }
        }
      }
    },
    "/users/{userid}/preferences/{preference}" : {
      "get" : {
        "tags" : [ "Users" ],
        "summary" : "Gets preference by user id",
        "description" : "Currently known user preferences include 'monitorNotification', 'monitoringCcSelf', 'EncodingInExport').",
        "operationId" : "getPreferenceById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "name" : "preference",
          "in" : "path",
          "description" : "Preference",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetPreferenceEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid userid, Invalid preference"
          }
        }
      }
    },
    "/users/{userid}/profile-picture" : {
      "post" : {
        "tags" : [ "Users" ],
        "summary" : "Uploads and sets profile picture by user id",
        "description" : "To test in Swagger UI, do not copy the Model Schema JSON to the body.  Instead, set the body to something like this:\n\n<pre>--4321MyBoundary\nContent-Disposition: form-data; name=\"picture\"; filename=\"profile.png\"\nContent-Type: image/png\nContent-Transfer-Encoding: base64\n\n<…picture content in base64…>\n--4321MyBoundary--</pre>\n\n When using the API outside of Swagger, the boundary can be any value that does not also appear in the base64-encoded file content.  The boundary specified in the Content-Type request header should match the boundary used in the request body.  For example, if '4321MyBoundary' is used in the request body, then the header is:\n\n<pre>Content-Type: multipart/form-data; boundary=4321MyBoundary</pre>",
        "operationId" : "setProfilePictureById",
        "consumes" : [ "multipart/form-data; boundary=4321MyBoundary" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Picture",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MultipartFormDataInput"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Profile picture is set",
            "schema" : {
              "$ref" : "#/definitions/GuidKey"
            }
          },
          "400" : {
            "description" : "Missing picture, wrong picture Content-Type, picture too large"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid userid"
          }
        }
      },
      "delete" : {
        "tags" : [ "Users" ],
        "summary" : "Deletes profile picture by user id",
        "description" : "",
        "operationId" : "deleteProfilePictureById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User ID",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "Profile picture is deleted"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user id"
          }
        }
      }
    },
    "/users/{userid}/projects" : {
      "get" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Gets a user's project list by user id",
        "description" : "",
        "operationId" : "getProjectsByUserid",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "name" : "sortby",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "dateCreated",
          "enum" : [ "id", "title", "dateCreated" ]
        }, {
          "name" : "fetchHierarchyPath",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Collection of projects"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user id"
          }
        }
      }
    },
    "/users/{userid}/projects/{projectid}" : {
      "put" : {
        "tags" : [ "Project Membership" ],
        "summary" : "Adds a user to specified project's member list by user id",
        "description" : "",
        "operationId" : "addUserById",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "User id",
          "required" : true,
          "type" : "string",
          "pattern" : "user(\\d+)"
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project id",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "User is added to the project succesfully"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid user id/project identifier"
          }
        }
      }
    }
  },
  "definitions" : {
    "AbstractEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "AssociationInfoEntity" : {
      "type" : "object",
      "required" : [ "associatedBy", "associatedByFullName", "associatedDate", "description", "editable" ],
      "properties" : {
        "associatedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "associatedByFullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "associatedDate" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "editable" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "infos" : {
          "type" : "array",
          "description" : "Collection of all associations between two objects (such as doc versions)",
          "items" : {
            "$ref" : "#/definitions/AssociationInfoEntity"
          }
        },
        "originVersionInfo" : {
          "$ref" : "#/definitions/AssociationVersionInfoEntity"
        },
        "targetVersionInfo" : {
          "$ref" : "#/definitions/AssociationVersionInfoEntity"
        }
      }
    },
    "AssociationVersionInfoEntity" : {
      "type" : "object",
      "required" : [ "ctfId", "url", "version" ],
      "properties" : {
        "ctfId" : {
          "type" : "string",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "url" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "Associations" : {
      "type" : "object",
      "properties" : {
        "associations" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AssociationsEntity"
          }
        },
        "objectSummaries" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/ObjectSummaryEntity"
          }
        },
        "levels" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "associationCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Total number of associations in the response"
        },
        "errors" : {
          "type" : "array",
          "description" : "Collection of entities representing the errors that are ignored",
          "items" : {
            "$ref" : "#/definitions/ErrorEntity"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Association collection"
    },
    "AssociationsEntity" : {
      "type" : "object",
      "required" : [ "childAssociations", "genericAssociations", "parentAssociations" ],
      "properties" : {
        "genericAssociations" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AssociationInfoEntity"
          }
        },
        "parentAssociations" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AssociationInfoEntity"
          }
        },
        "childAssociations" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AssociationInfoEntity"
          }
        }
      }
    },
    "Audit Change" : {
      "type" : "object",
      "required" : [ "flexField", "newValue", "oldValue", "propertyName", "propertyType" ],
      "properties" : {
        "propertyName" : {
          "type" : "string",
          "description" : "Name of the changed property",
          "readOnly" : true
        },
        "propertyType" : {
          "type" : "string",
          "description" : "Type of the changed property",
          "readOnly" : true
        },
        "oldValue" : {
          "type" : "string",
          "description" : "Value of the property before this change",
          "readOnly" : true
        },
        "newValue" : {
          "type" : "string",
          "description" : "Value of the property after this change",
          "readOnly" : true
        },
        "flexField" : {
          "type" : "boolean",
          "description" : "Whether this property is a user-defined field",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "oldValueData" : {
          "type" : "object",
          "description" : "Old value specific details",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "newValueData" : {
          "type" : "object",
          "description" : "New value specific details",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Represents a change on an object's property"
    },
    "Audit Operation" : {
      "type" : "object",
      "required" : [ "dateCreated", "operation", "status" ],
      "properties" : {
        "operation" : {
          "type" : "string",
          "description" : "Operation name",
          "readOnly" : true
        },
        "status" : {
          "type" : "string",
          "description" : "Operation status",
          "readOnly" : true
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the operation",
          "readOnly" : true
        },
        "changes" : {
          "type" : "array",
          "description" : "List of changes performed as part of this operation",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Audit Change"
          }
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Represents an audit operation (collection of changes)"
    },
    "Audit Transaction" : {
      "type" : "object",
      "required" : [ "createdByFullname", "createdByUsername", "dateCreated", "id", "objectId" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Transaction id",
          "readOnly" : true
        },
        "objectId" : {
          "type" : "string",
          "description" : "TeamForge object id",
          "readOnly" : true
        },
        "createdByUsername" : {
          "type" : "string",
          "description" : "Username of the user who performed the transaction",
          "readOnly" : true
        },
        "createdByFullname" : {
          "type" : "string",
          "description" : "Full name of the user who performed the transaction",
          "readOnly" : true
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date of the transaction",
          "readOnly" : true
        },
        "operations" : {
          "type" : "array",
          "description" : "Operations performed in this transaction",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Audit Operation"
          }
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "comments" : {
          "type" : "array",
          "description" : "Comments",
          "items" : {
            "type" : "string"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Represents an audit transaction(collection of operations)"
    },
    "AuditTransactionsEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Audit Transaction"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "Collection of projects" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Project"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "Collection of role objects" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Role"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "Collection of users" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "Comments" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/comment"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Collection of comments"
    },
    "CreateAssociationEntity" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string",
          "description" : "Association description",
          "readOnly" : true
        },
        "originTitle" : {
          "type" : "string",
          "description" : "Origin title (relevant only for IAF objects)",
          "readOnly" : true
        },
        "targetTitle" : {
          "type" : "string",
          "description" : "Target title (relevant only for IAF objects)",
          "readOnly" : true
        }
      }
    },
    "Delivery manifest" : {
      "type" : "object",
      "required" : [ "id", "progressions" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "url" : {
          "type" : "string"
        },
        "progressions" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Delivery progression"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Represents a work item or change in Continuum"
    },
    "Delivery package" : {
      "type" : "object",
      "required" : [ "id", "name", "versions" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "url" : {
          "type" : "string"
        },
        "versions" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Delivery package version"
          }
        }
      },
      "description" : "Represents a package in Continuum"
    },
    "Delivery package version" : {
      "type" : "object",
      "required" : [ "version" ],
      "properties" : {
        "version" : {
          "type" : "string",
          "readOnly" : true
        },
        "delivery" : {
          "$ref" : "#/definitions/Progression Phase Info"
        },
        "phase_info" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Progression Phase Info"
          }
        },
        "latest_phase_name" : {
          "type" : "string"
        }
      },
      "description" : "Represents a version of a Continuum package"
    },
    "Delivery progression" : {
      "type" : "object",
      "required" : [ "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "phase_names" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "packages" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Delivery package"
          }
        },
        "url" : {
          "type" : "string"
        }
      },
      "description" : "Represents progression for a Continuum manifest"
    },
    "ErrorEntity" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string",
          "readOnly" : true
        },
        "message" : {
          "type" : "string",
          "readOnly" : true
        },
        "id" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "GetAppConfigValue" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "App configuration value"
    },
    "GetAuthorizationKeysEntity" : {
      "type" : "object",
      "properties" : {
        "keys" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetLicenseEntity" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string",
          "readOnly" : true
        },
        "_type" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetPreferenceEntity" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "value" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetProjectGroupMembersEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Project group member"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetProjectMembersEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Project member"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetUserGroupEntity" : {
      "type" : "object",
      "required" : [ "description", "fullname", "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge Id",
          "readOnly" : true
        },
        "fullname" : {
          "type" : "string",
          "description" : "Group's full name",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Group's description",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetUserMonitor" : {
      "type" : "object",
      "required" : [ "fullName", "userId", "userName" ],
      "properties" : {
        "userId" : {
          "type" : "string",
          "readOnly" : true
        },
        "userName" : {
          "type" : "string",
          "readOnly" : true
        },
        "fullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to represent monitoring user"
    },
    "Group members" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Group member collection"
    },
    "GuidKey" : {
      "type" : "object",
      "properties" : {
        "prefix" : {
          "type" : "string"
        },
        "guid" : {
          "type" : "string"
        }
      }
    },
    "InputPart" : {
      "type" : "object",
      "properties" : {
        "bodyAsString" : {
          "type" : "string"
        },
        "contentTypeFromMessage" : {
          "type" : "boolean"
        },
        "headers" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "mediaType" : {
          "$ref" : "#/definitions/MediaType"
        }
      }
    },
    "IntegrationData" : {
      "type" : "object",
      "required" : [ "namedValues" ],
      "properties" : {
        "namedValues" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/NamedValue"
          }
        }
      },
      "description" : "Integration data model"
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "readOnly" : true
        },
        "method" : {
          "type" : "string",
          "readOnly" : true
        },
        "templated" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "MediaType" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "subtype" : {
          "type" : "string"
        },
        "parameters" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "wildcardType" : {
          "type" : "boolean"
        },
        "wildcardSubtype" : {
          "type" : "boolean"
        }
      }
    },
    "MonitorItems" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "description" : "Items to monitor",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to monitor list of Items"
    },
    "MonitoredObjects" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/monitor"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model for showing list of monitoring items for user"
    },
    "MonitoringUsers" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GetUserMonitor"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model for showing list of Users monitoring the current object"
    },
    "MultipartFormDataInput" : {
      "type" : "object",
      "properties" : {
        "formDataMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/InputPart"
            }
          }
        },
        "formData" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/InputPart"
          }
        },
        "preamble" : {
          "type" : "string"
        },
        "parts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/InputPart"
          }
        }
      }
    },
    "NamedValue" : {
      "type" : "object",
      "required" : [ "key", "value" ],
      "properties" : {
        "key" : {
          "type" : "string",
          "readOnly" : true
        },
        "value" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Named value model"
    },
    "Namespace" : {
      "type" : "object",
      "required" : [ "namespaceId" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "namespaceId" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Integration data namespace"
    },
    "ObjectSummaryEntity" : {
      "type" : "object",
      "required" : [ "createdBy", "createdByFullName", "createdDate", "description", "eventId", "id", "lastModifiedDate", "objectType", "objectTypeSourceName", "path", "remoteId", "status", "statusClass", "teamForgeId", "title", "version" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Target Id",
          "readOnly" : true
        },
        "title" : {
          "type" : "string"
        },
        "createdBy" : {
          "type" : "string"
        },
        "createdByFullName" : {
          "type" : "string"
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32"
        },
        "description" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "statusClass" : {
          "type" : "string"
        },
        "objectType" : {
          "type" : "string"
        },
        "objectTypeSourceName" : {
          "type" : "string"
        },
        "canEdit" : {
          "type" : "boolean",
          "description" : "When present, this flag shows whether the current user has permission to edit this object"
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "tfProjectName" : {
          "type" : "string",
          "description" : "TeamForge project name"
        },
        "path" : {
          "type" : "string"
        },
        "eventId" : {
          "type" : "string"
        },
        "remoteId" : {
          "type" : "string"
        },
        "customData" : {
          "type" : "object",
          "description" : "Map of type specific property names and values",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "deleted" : {
          "type" : "boolean",
          "description" : "Relevant for WorkItemSummary objects only. Absence of this property means it is not deleted."
        },
        "phantom" : {
          "type" : "boolean",
          "description" : "Relevant for events only. Absence of this property means that this object is not phantom."
        },
        "teamForgeId" : {
          "type" : "string"
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "PatchConfiguration" : {
      "type" : "object",
      "required" : [ "application", "name", "value" ],
      "properties" : {
        "surrogateId" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "application" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "Configuration property name",
          "readOnly" : true
        },
        "value" : {
          "type" : "string",
          "readOnly" : true
        },
        "valueType" : {
          "type" : "string",
          "description" : "value type",
          "readOnly" : true,
          "enum" : [ "String", "Integer", "Double", "Boolean" ]
        },
        "label" : {
          "type" : "string",
          "description" : "Display label for name",
          "readOnly" : true
        },
        "displayType" : {
          "type" : "string",
          "description" : "Display type for name",
          "readOnly" : true,
          "enum" : [ "TEXT", "NUMBER", "CHECKBOX", "DROPDOWN" ]
        },
        "helpText" : {
          "type" : "string",
          "description" : "Description for name",
          "readOnly" : true
        },
        "noteText" : {
          "type" : "string",
          "description" : "Note for the field",
          "readOnly" : true
        },
        "fieldValues" : {
          "type" : "object",
          "description" : "Possible values for dropdown config fields",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to update application configuration"
    },
    "PatchConfigurations" : {
      "type" : "object",
      "properties" : {
        "properties" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/PatchConfiguration"
          }
        }
      },
      "description" : "Model to set configurations"
    },
    "PatchPreference" : {
      "type" : "object",
      "required" : [ "name", "value" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "value" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model to set preference"
    },
    "PatchPreferences" : {
      "type" : "object",
      "properties" : {
        "preferences" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/PatchPreference"
          }
        }
      },
      "description" : "Model to set preferences"
    },
    "PatchProject" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "description" : "Project's new title.",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Project's new description.",
          "readOnly" : true
        },
        "accessLevel" : {
          "type" : "string",
          "description" : "Project access level",
          "readOnly" : true,
          "enum" : [ "private", "gated", "public" ]
        }
      },
      "description" : "Model to update a project"
    },
    "PatchProjectGroup" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "description" : "Project group's new title.",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Project group's new description.",
          "readOnly" : true
        }
      },
      "description" : "Model to update a project group"
    },
    "PatchRole" : {
      "type" : "object",
      "required" : [ "description", "preventInheritance", "title" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "preventInheritance" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "requestable" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model to update role data"
    },
    "PatchUser" : {
      "type" : "object",
      "properties" : {
        "email" : {
          "type" : "string",
          "readOnly" : true
        },
        "alternateEmail1" : {
          "type" : "string",
          "description" : "Alternate email 1 (will be set to null if not provided).",
          "readOnly" : true
        },
        "alternateEmail2" : {
          "type" : "string",
          "description" : "Alternate email 2 (will be set to null if not provided).",
          "readOnly" : true
        },
        "alternateEmail3" : {
          "type" : "string",
          "description" : "Alternate email 3 (will be set to null if not provided).",
          "readOnly" : true
        },
        "fullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "organization" : {
          "type" : "string",
          "description" : "Organization (will be set to null if not provided).",
          "readOnly" : true
        },
        "superUser" : {
          "type" : "boolean",
          "description" : "The default value is false if not provided.",
          "readOnly" : true
        },
        "restrictedUser" : {
          "type" : "boolean",
          "description" : "The default value is false if not provided.",
          "readOnly" : true
        },
        "localUser" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "status" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "Pending", "Active", "Disabled", "Removed" ]
        },
        "licenseTypes" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "locale" : {
          "type" : "string",
          "readOnly" : true
        },
        "timezone" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model to update user data"
    },
    "PatchUserGroup" : {
      "type" : "object",
      "properties" : {
        "fullname" : {
          "type" : "string",
          "description" : "Group's full name",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Group's description",
          "readOnly" : true
        }
      },
      "description" : "Model to update user group data"
    },
    "PostAuthorizationKeys" : {
      "type" : "object",
      "required" : [ "keys" ],
      "properties" : {
        "keys" : {
          "type" : "array",
          "description" : "Keys",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to set authorization keys for user"
    },
    "PostProject" : {
      "type" : "object",
      "required" : [ "description", "title" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Project name",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Project title",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Project description",
          "readOnly" : true
        },
        "templateId" : {
          "type" : "string",
          "description" : "Project template id",
          "readOnly" : true
        },
        "baselineId" : {
          "type" : "string",
          "description" : "Project baseline id",
          "readOnly" : true
        },
        "accessLevel" : {
          "type" : "string",
          "description" : "Project access level",
          "readOnly" : true,
          "enum" : [ "private", "gated", "public" ]
        }
      },
      "description" : "Model to create a project"
    },
    "PostProjectGroup" : {
      "type" : "object",
      "required" : [ "description", "title" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "description" : "Project group title",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Project group description",
          "readOnly" : true
        }
      },
      "description" : "Model to create a project group"
    },
    "PostRole" : {
      "type" : "object",
      "required" : [ "description", "preventInheritance", "roleType", "title" ],
      "properties" : {
        "roleType" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "Global", "Site", "Project" ]
        },
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "preventInheritance" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "requestable" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "autoGrant" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model to create a role"
    },
    "PostUser" : {
      "type" : "object",
      "required" : [ "email", "fullname", "licenseTypes", "locale", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "readOnly" : true
        },
        "email" : {
          "type" : "string",
          "description" : "User's email address",
          "readOnly" : true
        },
        "fullname" : {
          "type" : "string",
          "description" : "User's full name",
          "readOnly" : true
        },
        "organization" : {
          "type" : "string",
          "description" : "User's organization",
          "readOnly" : true
        },
        "superUser" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "restrictedUser" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "localUser" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "licenseTypes" : {
          "type" : "array",
          "description" : "User's license types",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "locale" : {
          "type" : "string",
          "description" : "User's locale",
          "readOnly" : true
        },
        "timezone" : {
          "type" : "string",
          "description" : "User's timezone",
          "readOnly" : true
        },
        "password" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model to create a user"
    },
    "PostUserGroup" : {
      "type" : "object",
      "required" : [ "fullname" ],
      "properties" : {
        "fullname" : {
          "type" : "string",
          "description" : "Group's full name",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Group's description",
          "readOnly" : true
        }
      },
      "description" : "Model to create a user group"
    },
    "Progression Phase Info" : {
      "type" : "object",
      "required" : [ "phase_name", "revision" ],
      "properties" : {
        "phase_name" : {
          "type" : "string",
          "readOnly" : true
        },
        "revision" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "full_version" : {
          "type" : "string"
        },
        "in_dt" : {
          "type" : "string"
        },
        "out_dt" : {
          "type" : "string"
        },
        "revision_url" : {
          "type" : "string"
        }
      },
      "description" : "Represents progression phase info for a manifest (Continuum)"
    },
    "Project" : {
      "type" : "object",
      "required" : [ "createdBy", "createdDate", "description", "id", "lastModifiedBy", "lastModifiedDate", "locked", "path", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge Id",
          "readOnly" : true
        },
        "createdBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "homePage" : {
          "type" : "string",
          "readOnly" : true
        },
        "parentProjectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "hierarchyPath" : {
          "type" : "string",
          "readOnly" : true
        },
        "locked" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "templateId" : {
          "type" : "string",
          "readOnly" : true
        },
        "baselineId" : {
          "type" : "string",
          "readOnly" : true
        },
        "accessLevel" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "gated", "private", "public" ]
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project model"
    },
    "Project Groups" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Project group"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project group collection"
    },
    "Project Request" : {
      "type" : "object",
      "required" : [ "createdByFullname", "createdByUsername", "createdDate", "description", "homePage", "id", "preserveHtmlHead", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge Id",
          "readOnly" : true
        },
        "createdByUsername" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdByFullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "homePage" : {
          "type" : "string",
          "readOnly" : true
        },
        "preserveHtmlHead" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project Request model"
    },
    "Project Requests" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Project Request"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project request collection"
    },
    "Project group" : {
      "type" : "object",
      "required" : [ "dateCreated", "description", "id", "path", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge Id",
          "readOnly" : true
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project group"
    },
    "Project group association" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Project Id",
          "readOnly" : true
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project group association model"
    },
    "Project group associations" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Project group association"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project group association collection"
    },
    "Project group member" : {
      "type" : "object",
      "required" : [ "email", "fullname", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "readOnly" : true
        },
        "email" : {
          "type" : "string",
          "readOnly" : true
        },
        "fullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "admin" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project group member"
    },
    "Project member" : {
      "type" : "object",
      "required" : [ "email", "fullname", "id", "username" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "readOnly" : true
        },
        "username" : {
          "type" : "string",
          "readOnly" : true
        },
        "email" : {
          "type" : "string",
          "readOnly" : true
        },
        "fullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project member"
    },
    "ProjectApprovalRequestSummary" : {
      "type" : "object",
      "required" : [ "projectId", "projectPath", "projectTitle", "typeSummaries" ],
      "properties" : {
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectPath" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectTitle" : {
          "type" : "string",
          "readOnly" : true
        },
        "typeSummaries" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/TypeApprovalRequestSummary"
          }
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Summary of approval requests in a TF project"
    },
    "Projects" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Project"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Project collection"
    },
    "RecentObject" : {
      "type" : "object",
      "required" : [ "displayName", "icon", "id", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge Id",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "displayName" : {
          "type" : "string",
          "readOnly" : true
        },
        "icon" : {
          "type" : "string"
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Recent object info"
    },
    "RecentObjects" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/RecentObject"
          }
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Recent object collection"
    },
    "RecentProject" : {
      "type" : "object",
      "required" : [ "id", "path", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge Id",
          "readOnly" : true
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Recent project info"
    },
    "RecentProjects" : {
      "type" : "object",
      "properties" : {
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/RecentProject"
          }
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Recent project collection"
    },
    "Role" : {
      "type" : "object",
      "required" : [ "description", "id", "preventInheritance", "requestable", "status", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge Id",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdInProjectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "status" : {
          "type" : "string",
          "readOnly" : true,
          "enum" : [ "A (Active)", "U (User-class)", "S (System)" ]
        },
        "roleType" : {
          "type" : "string",
          "readOnly" : true
        },
        "preventInheritance" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "requestable" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Role model"
    },
    "ServerApprovalRequestSummary" : {
      "type" : "object",
      "required" : [ "projectSummaries", "requestCount", "typeSummaries" ],
      "properties" : {
        "typeSummaries" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/TypeApprovalRequestSummary"
          }
        },
        "projectSummaries" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/ProjectApprovalRequestSummary"
          }
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "requestCount" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Summary of approval requests on TF server"
    },
    "TFServer" : {
      "type" : "object",
      "required" : [ "hostedMode", "locale", "serverTime", "serverTimezoneOffset", "version" ],
      "properties" : {
        "version" : {
          "type" : "string",
          "description" : "TeamForge version",
          "readOnly" : true
        },
        "hostedMode" : {
          "type" : "boolean",
          "description" : "Whether the server is running in hosted mode",
          "readOnly" : true
        },
        "broadcast" : {
          "type" : "string",
          "description" : "Broadcast message",
          "readOnly" : true
        },
        "broadcastHidable" : {
          "type" : "boolean",
          "description" : "Whether the broadcast message can be hidden",
          "readOnly" : true
        },
        "serverTime" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Current server time in ISO-8601 format",
          "readOnly" : true
        },
        "serverTimezoneOffset" : {
          "type" : "string",
          "description" : "Server's timezone offset. The offset is minor variation to the standard ISO-8601 formatted string for the offset",
          "readOnly" : true
        },
        "locale" : {
          "type" : "string",
          "description" : "Server's default system locale",
          "readOnly" : true
        },
        "canEditBroadcast" : {
          "type" : "boolean",
          "description" : "Whether current user can edit broadcast message",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "TeamForge server information"
    },
    "TypeApprovalRequestSummary" : {
      "type" : "object",
      "required" : [ "requestCount", "requestType" ],
      "properties" : {
        "requestType" : {
          "type" : "string",
          "readOnly" : true
        },
        "requestCount" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Summary of approval requests for  a TF object type"
    },
    "User" : {
      "type" : "object",
      "required" : [ "email", "fullname", "id", "lastLogin", "licenseTypes", "localUser", "locale", "restrictedUser", "status", "superUser", "timezone", "username" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge Id",
          "readOnly" : true
        },
        "username" : {
          "type" : "string",
          "readOnly" : true
        },
        "email" : {
          "type" : "string",
          "readOnly" : true
        },
        "alternateEmail1" : {
          "type" : "string",
          "readOnly" : true
        },
        "alternateEmail2" : {
          "type" : "string",
          "readOnly" : true
        },
        "alternateEmail3" : {
          "type" : "string",
          "readOnly" : true
        },
        "fullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "organization" : {
          "type" : "string",
          "readOnly" : true
        },
        "superUser" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "restrictedUser" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "localUser" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "status" : {
          "type" : "string",
          "readOnly" : true
        },
        "licenseTypes" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "lastLogin" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "timezone" : {
          "type" : "string",
          "readOnly" : true
        },
        "locale" : {
          "type" : "string",
          "readOnly" : true
        },
        "Pending email change request" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "User model"
    },
    "User groups" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GetUserGroupEntity"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "User group collection"
    },
    "User's Groups" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GetUserGroupEntity"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "User's group list"
    },
    "Users" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "User collection"
    },
    "comment" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge id",
          "readOnly" : true
        },
        "objectId" : {
          "type" : "string",
          "description" : "TeamForge object id",
          "readOnly" : true
        },
        "createdBy" : {
          "type" : "string",
          "description" : "Created by username",
          "readOnly" : true
        },
        "createdByFullname" : {
          "type" : "string",
          "description" : "Created by full name",
          "readOnly" : true
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Date this comment was created on",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "description" : "Comment",
          "readOnly" : true
        },
        "transactionId" : {
          "type" : "string",
          "description" : "Id of the transaction which this comment belongs to",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to represent a comment on a TeamForge object"
    },
    "monitor" : {
      "type" : "object",
      "properties" : {
        "objectKey" : {
          "type" : "string",
          "description" : "Object key",
          "readOnly" : true
        },
        "objectTitle" : {
          "type" : "string",
          "description" : "Object title",
          "readOnly" : true
        },
        "typeName" : {
          "type" : "string",
          "description" : "Object typename",
          "readOnly" : true
        },
        "isFolder" : {
          "type" : "boolean",
          "description" : "Is Folder",
          "readOnly" : true
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Last modified date",
          "readOnly" : true
        },
        "projectTitle" : {
          "type" : "string",
          "description" : "Project title",
          "readOnly" : true
        },
        "projectPath" : {
          "type" : "string",
          "description" : "Project path",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to represent monitoring item"
    }
  }
}