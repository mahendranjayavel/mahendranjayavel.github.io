{
  "swagger" : "2.0",
  "info" : {
    "version" : "20.3.397",
    "title" : "Document Management API"
  },
  "basePath" : "/ctfrest/docman/v1",
  "tags" : [ {
    "name" : "ColumnConfiguration"
  }, {
    "name" : "Document Default Reviewers"
  }, {
    "name" : "Document Reviews"
  }, {
    "name" : "DocumentFolders"
  }, {
    "name" : "DocumentFolders and Documents"
  }, {
    "name" : "Documents"
  }, {
    "name" : "Documents UI Preference"
  }, {
    "name" : "Fields"
  }, {
    "name" : "FolderLayout"
  }, {
    "name" : "Recent Documents"
  }, {
    "name" : "Workflow"
  } ],
  "paths" : {
    "/columnconfiguration/createpreference/{docfolderid}" : {
      "post" : {
        "tags" : [ "ColumnConfiguration" ],
        "summary" : "Create Document Column Preferences of a User",
        "description" : "",
        "operationId" : "createFolderPreference",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "save column configuration",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ColumnConfigSaveRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/FolderPreferenceEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/columnconfiguration/deletepreference/{folderpreferencekey}" : {
      "delete" : {
        "tags" : [ "ColumnConfiguration" ],
        "summary" : "Deletes Document Columns Preferences of a User",
        "description" : "",
        "operationId" : "deletePreferences",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderpreferencekey",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "tkpf(\\d+)"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/columnconfiguration/updatepreference/{docfolderid}" : {
      "put" : {
        "tags" : [ "ColumnConfiguration" ],
        "summary" : "Update Document Column Preferences of a User",
        "description" : "",
        "operationId" : "updateFolderPreference",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "update column preference",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ColumnConfigUpdateRequest"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/columnconfiguration/{docfolderid}" : {
      "get" : {
        "tags" : [ "ColumnConfiguration" ],
        "summary" : "Gets Document Columns Preferences of a User",
        "description" : "",
        "operationId" : "getColumnConfiguration",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "name" : "includeSharedPreference",
          "in" : "query",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetColumnConfigEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documentfolders/{docOrFolderid}/monitoring-users" : {
      "get" : {
        "tags" : [ "DocumentFolders and Documents" ],
        "summary" : "Get list of users monitoring a document / docment folder",
        "description" : "",
        "operationId" : "getMonitoringUsers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docOrFolderid",
          "in" : "path",
          "description" : "Document/folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "((docf(\\d{4,}))|(doc(\\d{4,})))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returned list of users monitoring a document / folder successfully.",
            "schema" : {
              "$ref" : "#/definitions/List User"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "No such object",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "500" : {
            "description" : "System Error"
          }
        }
      },
      "post" : {
        "tags" : [ "DocumentFolders and Documents" ],
        "summary" : "Add monitoring users to a document folder/item",
        "description" : "",
        "operationId" : "addMonitoringUsers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "users",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PostMonitoringUsers"
          }
        }, {
          "name" : "docOrFolderid",
          "in" : "path",
          "description" : "Document/folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "((docf(\\d{4,}))|(doc(\\d{4,})))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AddMonitoringUsersResponse"
            }
          },
          "400" : {
            "description" : "Invalid object",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "DocumentFolders and Documents" ],
        "summary" : "Remove monitoring users from a document folder/item",
        "description" : "",
        "operationId" : "removeMonitoringUsers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "users",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PostMonitoringUsers"
          }
        }, {
          "name" : "docOrFolderid",
          "in" : "path",
          "description" : "Document/folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "((docf(\\d{4,}))|(doc(\\d{4,})))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Removed monitoring users",
            "schema" : {
              "$ref" : "#/definitions/AddMonitoringUsersResponse"
            }
          },
          "403" : {
            "description" : "Permission denied"
          }
        }
      }
    },
    "/documentfolders/{docfolderid}" : {
      "get" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Gets document folder information",
        "description" : "",
        "operationId" : "getDocumentFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Document folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentFolderEntity"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Document folder version"
              }
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Deletes a document folder",
        "description" : "",
        "operationId" : "deleteDocumentFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Document folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "Document folder is deleted."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid document folder identifier"
          }
        }
      },
      "patch" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Updates document folder",
        "description" : "",
        "operationId" : "updateDocumentFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated folder data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchDocumentFolder"
          }
        }, {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "Document folder is updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentFolderEntity"
            }
          },
          "304" : {
            "description" : "Document folder data is up to date."
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid document folder name"
          }
        }
      }
    },
    "/documentfolders/{docfolderid}/documentfolders" : {
      "get" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Gets children folders which current user can view",
        "description" : "",
        "operationId" : "getDocumentFolders",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Parent document folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "name" : "recursive",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "basic",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentFoldersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Creates document folder",
        "description" : "",
        "operationId" : "createChildDocumentFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New folder data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostDocumentFolder"
          }
        }, {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Parent folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "201" : {
            "description" : "Document folder is created successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetCustomDocumentFolderEntity"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid document folder name"
          }
        }
      }
    },
    "/documentfolders/{docfolderid}/documentfolders-documents" : {
      "get" : {
        "tags" : [ "DocumentFolders and Documents" ],
        "summary" : "Gets document folders and documents under given folder which current user can view",
        "description" : "",
        "operationId" : "getFolderDetailedDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "name" : "searchByText",
          "in" : "query",
          "description" : "Search by string",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchByUser",
          "in" : "query",
          "description" : "Search by user",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "folderOffset",
          "in" : "query",
          "description" : "Folder Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "docOffset",
          "in" : "query",
          "description" : "Document Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of folders and documents to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "id"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort order. Default Decending Order.",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentsAndFoldersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documentfolders/{docfolderid}/documentfolders-documents/results" : {
      "post" : {
        "tags" : [ "DocumentFolders and Documents" ],
        "summary" : "Gets document folders and documents under given folder which current user can view",
        "description" : "",
        "operationId" : "getFolderDetailedDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "filters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterDocumentsAndFoldersRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentsAndFoldersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documentfolders/{docfolderid}/documentfolders/{childfolderid}" : {
      "put" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Moves a document folder into another document folder",
        "description" : "",
        "operationId" : "moveDocumentFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Destination folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "name" : "childfolderid",
          "in" : "path",
          "description" : "Folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "Document folder is moved successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentFolderEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid document folder identifier"
          }
        }
      }
    },
    "/documentfolders/{docfolderid}/documents" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets documents under given folder which current user can view",
        "description" : "",
        "operationId" : "getFolderDetailedDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of documents to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDetailedDocumentsEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Create document",
        "description" : "",
        "operationId" : "createDocument",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New document data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostDocument"
          }
        }, {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Parent folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "201" : {
            "description" : "Document is created successfully.",
            "schema" : {
              "$ref" : "#/definitions/DetailedDocument"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid document name"
          }
        }
      }
    },
    "/documentfolders/{docfolderid}/documents/multiple" : {
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Copy multiple documents to folder",
        "description" : "",
        "operationId" : "multipleDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of documents",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostDocumentsEntity"
          }
        }, {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "name" : "operation",
          "in" : "query",
          "description" : "To perform operation",
          "required" : false,
          "type" : "string",
          "enum" : [ "copy" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Document is copied successfully.",
            "schema" : {
              "$ref" : "#/definitions/PostDocumentsResponse"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Documents" ],
        "summary" : "Move multiple documents to folder",
        "description" : "",
        "operationId" : "moveDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "documentId",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MoveDocumentsEntity"
          }
        }, {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "Documents moved successfully.",
            "schema" : {
              "$ref" : "#/definitions/PutDocumentsResponse"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documentfolders/{docfolderid}/documents/{docid}" : {
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Copy single document to folder",
        "description" : "",
        "operationId" : "copyDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docid",
          "in" : "path",
          "description" : "documentId",
          "required" : true,
          "type" : "string",
          "pattern" : "doc(\\d+)"
        }, {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "name" : "operation",
          "in" : "query",
          "description" : "To perform operation",
          "required" : false,
          "type" : "string",
          "enum" : [ "copy" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Document is copied to folder successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Documents" ],
        "summary" : "Move single document to folder",
        "description" : "",
        "operationId" : "moveDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docid",
          "in" : "path",
          "description" : "documentId",
          "required" : true,
          "type" : "string",
          "pattern" : "doc(\\d+)"
        }, {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "Document is moved successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documentfolders/{docfolderid}/users" : {
      "get" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Gets users who have the view permission under a folder",
        "description" : "",
        "operationId" : "getUsers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Document folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Text to search user",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "allUsers",
          "in" : "query",
          "description" : "Fetch all users or only active users",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Count",
          "required" : false,
          "type" : "integer",
          "default" : 100,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/List User"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documentfolders/{projectid}" : {
      "get" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Gets root document folder information",
        "description" : "",
        "operationId" : "getRootDocumentFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentFolderEntity"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Document folder version"
              }
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documents/multiple" : {
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Delete multiple documents",
        "description" : "",
        "operationId" : "deleteDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "documentIds",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/DeleteDocumentsEntity"
          }
        }, {
          "name" : "operation",
          "in" : "query",
          "description" : "To perform operation",
          "required" : false,
          "type" : "string",
          "enum" : [ "delete" ]
        } ],
        "responses" : {
          "204" : {
            "description" : "Document(s) are deleted.",
            "schema" : {
              "$ref" : "#/definitions/DeleteDocumentsResponse"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documents/{docId}/reviews" : {
      "get" : {
        "tags" : [ "Document Reviews" ],
        "summary" : "Gets document reviews",
        "description" : "",
        "operationId" : "getDocumentReviews",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docId",
          "in" : "path",
          "description" : "Document identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "doc(\\d+)"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of document reviews to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentsEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such document",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documents/{docfolderid}/defaultreviewers" : {
      "get" : {
        "tags" : [ "Document Default Reviewers" ],
        "summary" : "Gets default document reviewers",
        "description" : "",
        "operationId" : "getDefaultReviewers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Document folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetReviewersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such document folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Document Default Reviewers" ],
        "summary" : "Updates default document reviewers",
        "description" : "",
        "operationId" : "updateDefaultReviewers",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Document folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Updated default document reviewers data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchReviewers"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetReviewersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such document folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documents/{docid}" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets document data by id",
        "description" : "",
        "operationId" : "getDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "doc(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DetailedDocument"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Document data version"
              }
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such document",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Documents" ],
        "summary" : "Delete single document",
        "description" : "",
        "operationId" : "deleteDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docid",
          "in" : "path",
          "description" : "documentId",
          "required" : true,
          "type" : "string",
          "pattern" : "doc(\\d+)"
        } ],
        "responses" : {
          "204" : {
            "description" : "Document is deleted."
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Documents" ],
        "summary" : "Sets document data by id",
        "description" : "",
        "operationId" : "updateDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "doc(\\d+)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Updated document data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchDocument"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Document data version",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DetailedDocument"
            },
            "headers" : {
              "ETag" : {
                "type" : "string",
                "description" : "Updated document data version"
              }
            }
          },
          "304" : {
            "description" : "Document is not modified"
          },
          "400" : {
            "description" : "Illegal argument(s)",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "403" : {
            "description" : "Permission denied/Document locked",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such document",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "500" : {
            "description" : "Illegal argument(s)",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documents/{docid}/file-id" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets file storage id for download",
        "description" : "",
        "operationId" : "getFileStorageId",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docid",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "doc(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GuidKey"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such file",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documents/{folderId}/fields" : {
      "get" : {
        "tags" : [ "Fields" ],
        "summary" : "Get list of document fields in the given folder's project",
        "description" : "The list of document fields defined in given folder's project",
        "operationId" : "getDocumentFieldsByFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        }, {
          "name" : "includeNone",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of fields",
            "schema" : {
              "$ref" : "#/definitions/listFields"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid folderId"
          }
        }
      },
      "post" : {
        "tags" : [ "Fields" ],
        "summary" : "Create document field in given folder's project",
        "description" : "",
        "operationId" : "addDocumentFieldByFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Field details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostField"
          }
        }, {
          "name" : "folderId",
          "in" : "path",
          "description" : "Folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        } ],
        "responses" : {
          "201" : {
            "description" : "Field added successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetField"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/documents/{folderId}/parentfields" : {
      "get" : {
        "tags" : [ "Fields" ],
        "summary" : "Gets parent document field options in given folder's project",
        "description" : "",
        "operationId" : "getParentDocumentFieldOptionsByFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Document folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/documents/{folderId}/reqfields" : {
      "get" : {
        "tags" : [ "Fields" ],
        "summary" : "Gets required document field options in given folder's project",
        "description" : "The list includes the possible document fields in given folder's project",
        "operationId" : "getRequiredDocumentFieldOptionsByFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of fields",
            "schema" : {
              "$ref" : "#/definitions/listRequiredFields"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid folderId"
          }
        }
      }
    },
    "/documents/{folderId}/workflow" : {
      "get" : {
        "tags" : [ "Workflow" ],
        "summary" : "Get document workflow transitions",
        "description" : "",
        "operationId" : "getDocumentWorkflowTransitionsByFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Folder Id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of transitions to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 15,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return list of transitions.",
            "schema" : {
              "$ref" : "#/definitions/ListFolderWorkflows"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid folder id"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow" ],
        "summary" : "Creates document workflow transition",
        "description" : "",
        "operationId" : "createDocumentWorkflowTransitionByFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Document folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Workflow transition data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FolderWorkflow"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Workflow transition is created successfully.",
            "schema" : {
              "$ref" : "#/definitions/Folder"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      },
      "patch" : {
        "tags" : [ "Workflow" ],
        "summary" : "Updates document workflow transition",
        "description" : "",
        "operationId" : "updateDocumentWorkflowTransitionByFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Updated folder workflow data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FolderWorkflow"
          }
        }, {
          "name" : "folderId",
          "in" : "path",
          "description" : "Document folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Document workflow transition updated successfully."
          },
          "304" : {
            "description" : "Document workflow transition data is up to date."
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/documents/{folderId}/workflow/from/{fromValue}" : {
      "get" : {
        "tags" : [ "Workflow" ],
        "summary" : "Get document workflow transitions from a status",
        "description" : "",
        "operationId" : "getDocumentWorkflowTransitionsFromStatusByFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Folder Id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        }, {
          "name" : "fromValue",
          "in" : "path",
          "description" : "Id of 'from' status value",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fldv(?:\\d{4,})|fldv-new)"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of transitions to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 15,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return list of transitions.",
            "schema" : {
              "$ref" : "#/definitions/ListFolderWorkflows"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid folder id"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/documents/{folderId}/workflow/from/{fromValue}/to/{toValue}" : {
      "delete" : {
        "tags" : [ "Workflow" ],
        "summary" : "Delete document workflow transition",
        "description" : "",
        "operationId" : "deleteDocumentWorkflowTransitionByFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Folder id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        }, {
          "name" : "fromValue",
          "in" : "path",
          "description" : "Id of 'from' status value",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fldv(?:\\d{4,})|fldv-new)"
        }, {
          "name" : "toValue",
          "in" : "path",
          "description" : "Id of 'to' status value",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fldv(?:\\d{4,}))"
        } ],
        "responses" : {
          "204" : {
            "description" : "Workflow transition is deleted."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid workflow transition identifier"
          }
        }
      }
    },
    "/fields/{fieldId}" : {
      "get" : {
        "tags" : [ "Fields" ],
        "summary" : "Gets field information",
        "description" : "",
        "operationId" : "getField",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fieldId",
          "in" : "path",
          "description" : "Field id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fild(?:\\d{4,}))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returned Field details successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetField"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid field Identifier"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      },
      "delete" : {
        "tags" : [ "Fields" ],
        "summary" : "Delete field",
        "description" : "",
        "operationId" : "deleteField",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fieldId",
          "in" : "path",
          "description" : "Field id to delete",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fild(?:\\d{4,}))"
        } ],
        "responses" : {
          "204" : {
            "description" : "Field is deleted successfully."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid field identifier"
          }
        }
      },
      "patch" : {
        "tags" : [ "Fields" ],
        "summary" : "Update field's data",
        "description" : "",
        "operationId" : "updateField",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fieldId",
          "in" : "path",
          "description" : "Field id to update",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fild(?:\\d{4,}))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Field details to update",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchField"
          }
        }, {
          "name" : "If-Match",
          "in" : "header",
          "description" : "Field version",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return updated field data successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetField"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/fields/{fieldId}/child" : {
      "patch" : {
        "tags" : [ "Fields" ],
        "summary" : "Update child field",
        "description" : "",
        "operationId" : "updateChildField",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fieldId",
          "in" : "path",
          "description" : "Child Field id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fild(?:\\d{4,}))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Child field details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchChildField"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Child Field updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetField"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/fields/{fieldId}/children" : {
      "post" : {
        "tags" : [ "Fields" ],
        "summary" : "Create child for a field",
        "description" : "",
        "operationId" : "addChildField",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fieldId",
          "in" : "path",
          "description" : "Parent field id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fild(?:\\d{4,})|none)"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Child field details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostChildField"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Child Field created successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetField"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/fields/{fieldId}/fieldValues" : {
      "get" : {
        "tags" : [ "Fields" ],
        "summary" : "Gets field values information",
        "description" : "",
        "operationId" : "getFieldValues",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "fieldId",
          "in" : "path",
          "description" : "Field Id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fild(?:\\d{4,}))"
        }, {
          "name" : "folderId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returned Field value details successfully.",
            "schema" : {
              "$ref" : "#/definitions/listFieldValues"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid field id Identifier"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/folderlayout/{folderId}" : {
      "get" : {
        "tags" : [ "FolderLayout" ],
        "summary" : "Gets folder layout for a document folder",
        "description" : "",
        "operationId" : "getFolderLayout",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Document folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListFolderLayout"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "FolderLayout" ],
        "summary" : "Updates folder layout for a document folder",
        "description" : "",
        "operationId" : "updateFolderLayoutDisplayOrder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Document folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Updated folder layout data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PatchFolderLayoutDisplayOrder"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListFolderLayout"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/folderlayout/{folderId}/separator" : {
      "post" : {
        "tags" : [ "FolderLayout" ],
        "summary" : "Add layout separator",
        "description" : "",
        "operationId" : "addLayoutSeparator",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Folder Id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Separator details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostLayoutSeparator"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Layout Separator added successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetFolderLayout"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/folderlayout/{folderId}/{folderLayoutId}/{separatorLabel}/separator" : {
      "patch" : {
        "tags" : [ "FolderLayout" ],
        "summary" : "Change Layout Separator Label",
        "description" : "",
        "operationId" : "changeLayoutSeparatorLabel",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "description" : "Folder Id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:docf(?:\\d{4,}))"
        }, {
          "name" : "folderLayoutId",
          "in" : "path",
          "description" : "Folder Layout Id",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fldly(?:\\d{4,}))"
        }, {
          "name" : "separatorLabel",
          "in" : "path",
          "description" : "Separator details",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Layout Separator Label updated successfully"
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/folderlayout/{folderLayoutId}" : {
      "delete" : {
        "tags" : [ "FolderLayout" ],
        "summary" : "Delete folder field or layout separator",
        "description" : "",
        "operationId" : "deleteFolderFieldOrLayoutSeparator",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderLayoutId",
          "in" : "path",
          "description" : "Folder field or layout separator to delete",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fldly(?:\\d{4,}))"
        } ],
        "responses" : {
          "204" : {
            "description" : "Folder field or layout separator is deleted successfully."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid field identifier"
          }
        }
      }
    },
    "/projects/{projectIdOrPath}/documentfolders-documents/multiple" : {
      "delete" : {
        "tags" : [ "DocumentFolders and Documents" ],
        "summary" : "Delete multiple folders and documents",
        "description" : "",
        "operationId" : "deleteFoldersAndDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "folderAndDocumentIds",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PutDocumentsAndFolders"
          }
        }, {
          "name" : "projectIdOrPath",
          "in" : "path",
          "description" : "Project id/path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "operation",
          "in" : "query",
          "description" : "To perform operation",
          "required" : false,
          "type" : "string",
          "enum" : [ "delete" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DeleteDocumentsAndFoldersResponse"
            }
          },
          "400" : {
            "description" : "Invalid input",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectIdOrPath}/favourites" : {
      "get" : {
        "tags" : [ "DocumentFolders and Documents" ],
        "summary" : "Gets favourite documents for the user",
        "description" : "",
        "operationId" : "getFolderDetailedDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectIdOrPath",
          "in" : "path",
          "description" : "Project id/path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "searchByText",
          "in" : "query",
          "description" : "Search by string",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "searchByUser",
          "in" : "query",
          "description" : "Search by user",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Count",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort by column name",
          "required" : false,
          "type" : "string",
          "default" : "id"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort order.  True - Ascending Order, False - Descending Order, Default  - Descending Order. ",
          "required" : false,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDetailedDocumentsEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "DocumentFolders and Documents" ],
        "summary" : "Gets favourite folders and documents for the user",
        "description" : "<div><b>Since:</b><br><br>&nbsp;&nbsp;&nbsp;&nbsp;20.1</div><br>",
        "operationId" : "getFavouriteDocumentsAndFolders",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectIdOrPath",
          "in" : "path",
          "description" : "Project id/path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "filters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterDocumentsAndFoldersRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentsAndFoldersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "DocumentFolders and Documents" ],
        "summary" : "Favourite multiple documents",
        "description" : "",
        "operationId" : "favouriteDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectIdOrPath",
          "in" : "path",
          "description" : "Project id/path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "docOrDocFolderIds",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FavouriteDocumentsEntity"
          }
        }, {
          "name" : "operation",
          "in" : "query",
          "description" : "To perform operation",
          "required" : true,
          "type" : "string",
          "default" : "add",
          "enum" : [ "add", "remove" ]
        } ],
        "responses" : {
          "204" : {
            "description" : "Documents added to favourites",
            "schema" : {
              "$ref" : "#/definitions/FavouriteDocumentsResponse"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectIdOrPath}/tags" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets the tags in the project",
        "description" : "",
        "operationId" : "getTagsForProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectIdOrPath",
          "in" : "path",
          "description" : "Project id/path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "limit",
          "required" : false,
          "type" : "integer",
          "default" : 20,
          "format" : "int32"
        } ],
        "responses" : {
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectIdOrPath}/tags/{tagId}" : {
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets documents under given tag which current user can view",
        "description" : "",
        "operationId" : "getFolderDetailedDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectIdOrPath",
          "in" : "path",
          "description" : "Project id/path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "tagId",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:tag(?:\\d+))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "filters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterDocumentsAndFoldersRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentsAndFoldersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectId}/documents-preference" : {
      "get" : {
        "tags" : [ "Documents UI Preference" ],
        "summary" : "Gets the documents UI preference for the user either new/old page",
        "description" : "",
        "operationId" : "getDocumentsPreference",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "Project id/path to retrieve user documents preference",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the document preference details.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentsPreference"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Documents UI Preference" ],
        "summary" : "Update the documents UI preference for the user either new/old page",
        "description" : "",
        "operationId" : "updateDocumentsPreference",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "UpdateDocumentPreference",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateDocumentsPreference"
          }
        }, {
          "name" : "projectId",
          "in" : "path",
          "description" : "Project id/path to update user preference",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return the document user preference details.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentsPreference"
            }
          }
        }
      }
    },
    "/projects/{projectId}/recent-documents" : {
      "get" : {
        "tags" : [ "Recent Documents" ],
        "summary" : "Resource will list down the recent documents for a user by project id/path.",
        "description" : "",
        "operationId" : "getRecentDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "Project id/path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort by column name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort order. Last visited first.",
          "required" : false,
          "type" : "boolean"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Count",
          "required" : false,
          "type" : "integer",
          "default" : 10,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDetailedDocumentsEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Recent Documents" ],
        "summary" : "Resource will list down the recent documents for a user by project id/path.",
        "description" : "<div><b>Since:</b><br><br>&nbsp;&nbsp;&nbsp;&nbsp;20.2</div><br>",
        "operationId" : "getRecentDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "path",
          "description" : "Project id/path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "filters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/FilterDocumentsAndFoldersRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetCustomDetailedDocumentsEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/documentfolders" : {
      "get" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Gets document folders under root folder",
        "description" : "",
        "operationId" : "getRootDocumentFolders",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "recursive",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        }, {
          "name" : "basic",
          "in" : "query",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentFoldersEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Creates top level document folder",
        "description" : "",
        "operationId" : "createTopLevelDocumentFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New folder data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostDocumentFolder"
          }
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "201" : {
            "description" : "Document folder is created successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentFolderEntity"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid document folder name"
          }
        }
      }
    },
    "/projects/{projectid}/documentfolders/tree" : {
      "post" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Gets document folder tree for the user",
        "description" : "",
        "operationId" : "getRootDocumentFolderTree",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "List of ids of permitted document folders to be included as part of the tree",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PostRootDocumentFolderTree"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/DocumentFolderTreeResponse"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/documentfolders/{childfolderid}" : {
      "put" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Moves a document folder into root document folder",
        "description" : "",
        "operationId" : "moveDocumentFolderIntoRootFolder",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "childfolderid",
          "in" : "path",
          "description" : "Folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "Document folder is moved successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentFolderEntity"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid document folder identifier"
          }
        }
      }
    },
    "/projects/{projectid}/documentfolders/{docfolderid}/move" : {
      "put" : {
        "tags" : [ "DocumentFolders" ],
        "summary" : "Moves a document folders / documents into another document folder",
        "description" : "",
        "operationId" : "moveFoldersAndDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Document/Folders",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PutDocumentsAndFolders"
          }
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "docfolderid",
          "in" : "path",
          "description" : "Destination folder identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "docf(\\d+)"
        } ],
        "responses" : {
          "200" : {
            "description" : "Document/folders moved successfully.",
            "schema" : {
              "$ref" : "#/definitions/PutDocumentsAndFoldersResponse"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid document/folder identifier"
          }
        }
      }
    },
    "/projects/{projectid}/documents" : {
      "get" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets documents under root document folder which current user can view",
        "description" : "",
        "operationId" : "getRootFolderDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of documents to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 25,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetDetailedDocumentsEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Create document in root folder",
        "description" : "",
        "operationId" : "createDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "New document data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostDocument"
          }
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "201" : {
            "description" : "Document is created successfully in root folder.",
            "schema" : {
              "$ref" : "#/definitions/DetailedDocument"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "Invalid document name"
          }
        }
      }
    },
    "/projects/{projectid}/documents/download" : {
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Download Documents and Folders in a project",
        "description" : "",
        "operationId" : "downloadDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "documentAndFolderIds",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DownloadDocumentsEntity"
          }
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Documents downloaded succesfully .",
            "schema" : {
              "type" : "string"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier / document folder identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/documents/multiple" : {
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Copy multiple documents to root folder",
        "description" : "",
        "operationId" : "multipleDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of documents",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostDocumentsEntity"
          }
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "operation",
          "in" : "query",
          "description" : "To perform operation",
          "required" : false,
          "type" : "string",
          "enum" : [ "copy" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Document is copied successfully to root folder.",
            "schema" : {
              "$ref" : "#/definitions/PostDocumentsResponse"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Documents" ],
        "summary" : "Move multiple documents to root folder",
        "description" : "",
        "operationId" : "moveDocuments",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "documentId",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/MoveDocumentsEntity"
          }
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Documents moved successfully to root folder.",
            "schema" : {
              "$ref" : "#/definitions/PutDocumentsResponse"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/documents/{docid}" : {
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Copy single document to root folder",
        "description" : "",
        "operationId" : "copyDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docid",
          "in" : "path",
          "description" : "documentId",
          "required" : true,
          "type" : "string",
          "pattern" : "doc(\\d+)"
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "operation",
          "in" : "query",
          "description" : "To perform operation",
          "required" : false,
          "type" : "string",
          "enum" : [ "copy" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Document is copied to root folder successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Documents" ],
        "summary" : "Move single document to root folder",
        "description" : "",
        "operationId" : "moveDocument",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "docid",
          "in" : "path",
          "description" : "documentId",
          "required" : true,
          "type" : "string",
          "pattern" : "doc(\\d+)"
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Document is moved to root folder successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetDocumentEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid document identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/fields" : {
      "get" : {
        "tags" : [ "Fields" ],
        "summary" : "Get document fields defined in the context project",
        "description" : "",
        "operationId" : "getDocumentFieldsByProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/listFields"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Fields" ],
        "summary" : "Creates document field",
        "description" : "",
        "operationId" : "addDocumentFieldByProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Field details",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PostField"
          }
        }, {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier (id or path)",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "201" : {
            "description" : "Field added successfully.",
            "schema" : {
              "$ref" : "#/definitions/GetField"
            }
          },
          "400" : {
            "description" : "Invalid parameter"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/projects/{projectid}/fields/by-name/{fieldName}" : {
      "get" : {
        "tags" : [ "Fields" ],
        "summary" : "Get document field by name defined in the context project",
        "description" : "",
        "operationId" : "getDocumentFieldByName",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "fieldName",
          "in" : "path",
          "description" : "Field name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/GetField"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project/field",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/fields/parent-field-options" : {
      "get" : {
        "tags" : [ "Fields" ],
        "summary" : "Gets parent document field options in given project",
        "description" : "",
        "operationId" : "getParentDocumentFieldOptionsByProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier (id or path)",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object"
              }
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "Invalid project identifier",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/projects/{projectid}/fields/required-field-options" : {
      "get" : {
        "tags" : [ "Fields" ],
        "summary" : "Gets required document field options in given project",
        "description" : "The list includes the possible document fields for document workflow transition",
        "operationId" : "getRequiredDocumentFieldOptionsByProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project identifier",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        } ],
        "responses" : {
          "200" : {
            "description" : "Returns the list of fields",
            "schema" : {
              "$ref" : "#/definitions/listRequiredFields"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project identifier"
          }
        }
      }
    },
    "/projects/{projectid}/workflow" : {
      "get" : {
        "tags" : [ "Workflow" ],
        "summary" : "Get document workflow transitions",
        "description" : "",
        "operationId" : "getDocumentWorkflowTransitionsByProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project id",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of transitions to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 15,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return list of transitions.",
            "schema" : {
              "$ref" : "#/definitions/ListFolderWorkflows"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project id"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      },
      "post" : {
        "tags" : [ "Workflow" ],
        "summary" : "Creates document workflow transition",
        "description" : "",
        "operationId" : "createDocumentWorkflowTransitionByProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project id",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Workflow data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FolderWorkflow"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Workflow transition is created successfully.",
            "schema" : {
              "$ref" : "#/definitions/Folder"
            }
          },
          "400" : {
            "description" : "Invalid input"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      },
      "patch" : {
        "tags" : [ "Workflow" ],
        "summary" : "Updates document workflow transition",
        "description" : "",
        "operationId" : "updateDocumentWorkflowTransitionByProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project id",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Workflow data",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/FolderWorkflow"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Workflow transition is updated successfully.",
            "schema" : {
              "$ref" : "#/definitions/Folder"
            }
          },
          "400" : {
            "description" : "Invalid input"
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project id"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/projects/{projectid}/workflow/from/{fromValue}" : {
      "get" : {
        "tags" : [ "Workflow" ],
        "summary" : "Get document workflow transitions from a status",
        "description" : "",
        "operationId" : "getDocumentWorkflowTransitionsFromStatusByProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project id",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "fromValue",
          "in" : "path",
          "description" : "Id of 'from' status value",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fldv(?:\\d{4,})|fldv-new)"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of transitions to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : 15,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return list of transitions.",
            "schema" : {
              "$ref" : "#/definitions/ListFolderWorkflows"
            }
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project/status id"
          },
          "500" : {
            "description" : "System Error"
          }
        }
      }
    },
    "/projects/{projectid}/workflow/from/{fromValue}/to/{toValue}" : {
      "delete" : {
        "tags" : [ "Workflow" ],
        "summary" : "Delete document workflow transition",
        "description" : "",
        "operationId" : "deleteDocumentWorkflowTransitionByProject",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectid",
          "in" : "path",
          "description" : "Project id",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:proj(?:\\d+))|(projects\\.[-a-z0-9_]+))"
        }, {
          "name" : "fromValue",
          "in" : "path",
          "description" : "Id of 'from' status value",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fldv(?:\\d{4,})|fldv-new)"
        }, {
          "name" : "toValue",
          "in" : "path",
          "description" : "Id of 'to' status value",
          "required" : true,
          "type" : "string",
          "pattern" : "(?:fldv(?:\\d{4,}))"
        } ],
        "responses" : {
          "204" : {
            "description" : "Workflow transition is deleted."
          },
          "403" : {
            "description" : "Permission denied"
          },
          "404" : {
            "description" : "Invalid project/status identifier"
          }
        }
      }
    },
    "/users/myself/assigned-reviews" : {
      "get" : {
        "tags" : [ "Document Reviews" ],
        "summary" : "Gets open document reviews that are assigned to current user",
        "description" : "",
        "operationId" : "getMyOutstandingDocumentReviews",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "query",
          "description" : "Project identifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of document reviews to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserDocumentReviews"
            }
          },
          "403" : {
            "description" : "Permission denied (Invalid license)",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/users/myself/created-reviews" : {
      "get" : {
        "tags" : [ "Document Reviews" ],
        "summary" : "Gets open document reviews that are created by current user",
        "description" : "",
        "operationId" : "getDocumentReviewsCreatedByMe",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "projectId",
          "in" : "query",
          "description" : "Project identifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "type" : "integer",
          "default" : 0,
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "Max. number of document reviews to be returned in one call",
          "required" : false,
          "type" : "integer",
          "default" : -1,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/UserDocumentReviews"
            }
          },
          "403" : {
            "description" : "Permission denied (Invalid license)",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such project",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    },
    "/{folderId}/advanced-search/results" : {
      "post" : {
        "tags" : [ "Documents" ],
        "summary" : "Gets documents matching the advanced search criteria which current user can view",
        "description" : "<div><b>Since:</b><br><br>&nbsp;&nbsp;&nbsp;&nbsp;20.1</div><br>",
        "operationId" : "getAdvancedSearchResults",
        "consumes" : [ "application/json", "application/json+v2" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "folderId",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "((?:docf(?:\\d{4,}))|(docman\\.[-a-z0-9_]+))"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "filters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AdvancedDocumentSearchRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ListCustomDetailedDocumentEntity"
            }
          },
          "403" : {
            "description" : "Permission denied",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          },
          "404" : {
            "description" : "No such folder",
            "schema" : {
              "$ref" : "#/definitions/ErrorEntity"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "AbstractEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "AddMonitoringUsersResponse" : {
      "type" : "object",
      "properties" : {
        "successIds" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "failureMap" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Model describes the success and failure ids which are successful/failure of POST operation"
    },
    "AdvancedDocumentSearchRequest" : {
      "type" : "object",
      "properties" : {
        "keyword" : {
          "type" : "string",
          "readOnly" : true
        },
        "documentScope" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "allTextFieldsScope" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "metaDataScope" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "allVersionScope" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "dateCreatedFrom" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateCreatedTo" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateModifiedFrom" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateModifiedTo" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdOrModifiedBy" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "fieldMap" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "tagIds" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "sortBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "sortOrder" : {
          "type" : "boolean",
          "readOnly" : true
        }
      },
      "description" : "Model for advanced document search"
    },
    "AutoPopulateData" : {
      "type" : "object",
      "properties" : {
        "fieldId" : {
          "type" : "string"
        },
        "values" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "usersList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SimpleUserData"
          }
        },
        "dateValue" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ColumnConfigSaveRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderKey" : {
          "type" : "string",
          "readOnly" : true
        },
        "visibleColumns" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "defaultPreference" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "sortColumn" : {
          "type" : "string",
          "readOnly" : true
        },
        "sortOrder" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model to save  preferences"
    },
    "ColumnConfigUpdateRequest" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderKey" : {
          "type" : "string",
          "readOnly" : true
        },
        "key" : {
          "type" : "string",
          "readOnly" : true
        },
        "visibleColumns" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "defaultPreference" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "sortColumn" : {
          "type" : "string",
          "readOnly" : true
        },
        "sortOrder" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model to update  preferences"
    },
    "CustomDetailedDocument" : {
      "type" : "object",
      "required" : [ "createdBy", "currentVersion", "dateCreated", "dateLastModified", "dateVersionCreated", "dateVersionDeleted", "fileName", "fileSize", "folderId", "folderPath", "folderTitle", "id", "isVersionDeleted", "lastModifiedBy", "lastModifiedByFullName", "mimeType", "projectId", "projectPath", "projectTitle", "storedFileUrl", "title", "versionCreatedBy", "versionDeletedBy", "versionId", "versionNumber", "versionStatus" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge id",
          "readOnly" : true
        },
        "versionId" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionNumber" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "projectPath" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectTitle" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderTitle" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderId" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderPath" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "flexFields" : {
          "type" : "array",
          "description" : "Flex fields",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/FlexField"
          }
        },
        "createdBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedByFullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateLastModified" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "currentVersion" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "dateVersionCreated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "versionCreatedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionStatus" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionComment" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionCreatedByFullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "mimeType" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileName" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileSize" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "storedFileUrl" : {
          "type" : "string",
          "readOnly" : true
        },
        "monitoringUserId" : {
          "type" : "string",
          "readOnly" : true
        },
        "lockedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "downloadRestricted" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "allowForceUnlock" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "versionDeletedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionDeletedByFullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "isVersionDeleted" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "dateVersionDeleted" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "tagNames" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "avatarUrl" : {
          "type" : "string",
          "readOnly" : true
        },
        "isFavourite" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model describes the full new set of document details, isLocked and avatar url added recently"
    },
    "DeleteDocumentsAndFoldersResponse" : {
      "type" : "object",
      "properties" : {
        "successIds" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "failureMap" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PutDocumentsAndFoldersResponse"
            }
          }
        }
      },
      "description" : "Model describes the document and folder ids which are successful/failure of DELETE operation"
    },
    "DeleteDocumentsEntity" : {
      "type" : "object",
      "properties" : {
        "documentIds" : {
          "type" : "array",
          "description" : "Document IDs",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to take multiple document id"
    },
    "DeleteDocumentsResponse" : {
      "type" : "object",
      "properties" : {
        "successIds" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "failureMap" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Model describes the document ids which are successful/failure of DELETE operation"
    },
    "DetailedDocument" : {
      "type" : "object",
      "required" : [ "createdBy", "currentVersion", "dateCreated", "dateLastModified", "dateVersionCreated", "dateVersionDeleted", "fileName", "fileSize", "folderId", "folderPath", "folderTitle", "id", "isVersionDeleted", "lastModifiedBy", "lastModifiedByFullName", "mimeType", "name", "projectId", "projectPath", "projectTitle", "storedFileUrl", "title", "versionCreatedBy", "versionDeletedBy", "versionId", "versionNumber", "versionStatus" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge id",
          "readOnly" : true
        },
        "versionId" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionNumber" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "projectPath" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectTitle" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderTitle" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderId" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderPath" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "flexFields" : {
          "type" : "array",
          "description" : "Flex fields",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/FlexField"
          }
        },
        "createdBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedByFullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateLastModified" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "currentVersion" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "dateVersionCreated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "versionCreatedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionStatus" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionComment" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionCreatedByFullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "mimeType" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileName" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileSize" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "storedFileUrl" : {
          "type" : "string",
          "readOnly" : true
        },
        "monitoringUserId" : {
          "type" : "string",
          "readOnly" : true
        },
        "lockedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "downloadRestricted" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "allowForceUnlock" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "versionDeletedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionDeletedByFullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "isVersionDeleted" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "dateVersionDeleted" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "canDownload" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "tagNames" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "textContent" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model describes the full document details"
    },
    "DetailedDocumentFolder" : {
      "type" : "object",
      "required" : [ "createdBy", "dateCreated", "dateLastModified", "description", "id", "lastModifiedBy", "lastModifiedByFullName", "path", "projectId", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge id",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "displayPosition" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "parentId" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdByFullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedByFullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateLastModified" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "isFavourite" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "monitoringUserId" : {
          "type" : "string",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "avatarUrl" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model describes the full document folder details"
    },
    "DocumentFolderTreeResponse" : {
      "type" : "object",
      "properties" : {
        "rootFolder" : {
          "readOnly" : true,
          "$ref" : "#/definitions/GetDocumentFolderEntity"
        },
        "folderCount" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        }
      },
      "description" : "Model to describe the document folder tree response"
    },
    "DownloadDocumentsEntity" : {
      "type" : "object",
      "properties" : {
        "documentAndFolderIds" : {
          "type" : "array",
          "description" : "documentAndFolderIds",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to take multiple document and document folders id "
    },
    "ErrorEntity" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "type" : "string",
          "readOnly" : true
        },
        "message" : {
          "type" : "string",
          "readOnly" : true
        },
        "id" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "FavouriteDocumentsEntity" : {
      "type" : "object",
      "properties" : {
        "docOrDocFolderIds" : {
          "type" : "array",
          "description" : "Document/DocumentFolder Ids",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to take multiple document id"
    },
    "FavouriteDocumentsResponse" : {
      "type" : "object",
      "properties" : {
        "successIds" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "failureMap" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Model describes the document ids which are successful/failure of Favourite operation"
    },
    "FieldValue" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Id of the fieldValue",
          "readOnly" : true
        },
        "value" : {
          "type" : "string",
          "description" : "Value of the fieldValue",
          "readOnly" : true
        },
        "valueClass" : {
          "type" : "string",
          "description" : "Value Type",
          "readOnly" : true
        },
        "isDefault" : {
          "type" : "boolean",
          "description" : "Marking to fieldvalue as default",
          "readOnly" : true
        },
        "isDeleted" : {
          "type" : "boolean",
          "description" : "Marking the field value is deleted",
          "readOnly" : true
        },
        "visible" : {
          "type" : "boolean",
          "description" : "Marking the field value as visible",
          "readOnly" : true
        }
      },
      "description" : "Model to create a new field value"
    },
    "FilterDocumentsAndFoldersRequest" : {
      "type" : "object",
      "properties" : {
        "sortBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "sortOrder" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "filter" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "preferredColumns" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "folderOffset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "docOffset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "docTotalCount" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "docFolderTotalCount" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        }
      },
      "description" : "Model to filter documents and folders for list"
    },
    "FlexField" : {
      "type" : "object",
      "required" : [ "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name",
          "readOnly" : true
        },
        "values" : {
          "type" : "array",
          "description" : "Values",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "Type",
          "readOnly" : true,
          "enum" : [ "String", "DATE", "USER" ]
        }
      },
      "description" : "Model for flexfields"
    },
    "Folder" : {
      "type" : "object",
      "required" : [ "fieldId", "fromValue", "toValue" ],
      "properties" : {
        "fieldId" : {
          "type" : "string",
          "description" : "Folder status field id",
          "readOnly" : true
        },
        "fromValue" : {
          "type" : "string",
          "description" : "'from' status field value id",
          "readOnly" : true
        },
        "toValue" : {
          "type" : "string",
          "description" : "'to' status field value id",
          "readOnly" : true
        },
        "rolesOrWildcard" : {
          "type" : "array",
          "description" : "Roles ids for the workflow",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/NamedValue"
          }
        },
        "requiredFieldIds" : {
          "type" : "array",
          "description" : "Ids of the required fields",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "displayOrder" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Display Order",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model describes the Folder workflow details"
    },
    "FolderPreferenceEntity" : {
      "type" : "object",
      "properties" : {
        "getfolderPreferences" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "description" : "Model to represent Folder Preferences"
    },
    "FolderWorkflow" : {
      "type" : "object",
      "required" : [ "fieldId", "fromValue", "toValue" ],
      "properties" : {
        "fieldId" : {
          "type" : "string",
          "description" : "Folder status field id",
          "readOnly" : true
        },
        "fromValue" : {
          "type" : "string",
          "description" : "Id of the 'from' status field value",
          "readOnly" : true
        },
        "toValue" : {
          "type" : "string",
          "description" : "Id of the 'to' status field value",
          "readOnly" : true
        },
        "rolesOrWildcard" : {
          "type" : "array",
          "description" : "Role ids for the workflow",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "requiredFieldIds" : {
          "type" : "array",
          "description" : "Ids of the required fields",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "hiddenFieldIds" : {
          "type" : "array",
          "description" : "Ids of the hidden fields",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "autoPopulateData" : {
          "type" : "array",
          "description" : "auto populate fields and values",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/AutoPopulateData"
          }
        }
      },
      "description" : "Model to create / update a folder workflow"
    },
    "GetColumnConfigEntity" : {
      "type" : "object",
      "properties" : {
        "allColumns" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          }
        },
        "preferenceList" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        },
        "getfolderPreferences" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "description" : "Model to represent custom column configuration"
    },
    "GetCustomDetailedDocumentsEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/CustomDetailedDocument"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetCustomDocumentFolderEntity" : {
      "type" : "object",
      "required" : [ "createdBy", "createdByFullName", "createdDate", "description", "id", "lastModifiedBy", "lastModifiedByFullName", "lastModifiedDate", "path", "projectId", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge id",
          "readOnly" : true
        },
        "createdBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdByFullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedByFullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "parentId" : {
          "type" : "string",
          "readOnly" : true
        },
        "displayPosition" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GetCustomDocumentFolderEntity"
          }
        },
        "permissions" : {
          "$ref" : "#/definitions/GetDocumentFolderPermissionsEntity"
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetDetailedDocumentsEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/DetailedDocument"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetDocumentEntity" : {
      "type" : "object",
      "required" : [ "createdBy", "currentVersion", "dateCreated", "dateLastModified", "dateVersionCreated", "dateVersionDeleted", "fileName", "fileSize", "folderId", "folderPath", "folderTitle", "id", "isVersionDeleted", "lastModifiedBy", "lastModifiedByFullName", "mimeType", "name", "projectId", "projectPath", "projectTitle", "storedFileUrl", "title", "versionCreatedBy", "versionDeletedBy", "versionId", "versionNumber", "versionStatus" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge id",
          "readOnly" : true
        },
        "versionId" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionNumber" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "projectPath" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectTitle" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderTitle" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderId" : {
          "type" : "string",
          "readOnly" : true
        },
        "folderPath" : {
          "type" : "string",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedByFullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "dateLastModified" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "currentVersion" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "dateVersionCreated" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "versionCreatedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionStatus" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionComment" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionCreatedByFullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "mimeType" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileName" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileSize" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "storedFileUrl" : {
          "type" : "string",
          "readOnly" : true
        },
        "monitoringUserId" : {
          "type" : "string",
          "readOnly" : true
        },
        "lockedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "downloadRestricted" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "allowForceUnlock" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "versionDeletedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionDeletedByFullname" : {
          "type" : "string",
          "readOnly" : true
        },
        "isVersionDeleted" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "dateVersionDeleted" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "canDownload" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetDocumentFolderEntity" : {
      "type" : "object",
      "required" : [ "createdBy", "createdDate", "description", "id", "lastModifiedBy", "lastModifiedByFullName", "lastModifiedDate", "path", "projectId", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge id",
          "readOnly" : true
        },
        "createdBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedByFullName" : {
          "type" : "string",
          "readOnly" : true
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "path" : {
          "type" : "string",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectId" : {
          "type" : "string",
          "readOnly" : true
        },
        "parentId" : {
          "type" : "string",
          "readOnly" : true
        },
        "displayPosition" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GetDocumentFolderEntity"
          }
        },
        "permissions" : {
          "$ref" : "#/definitions/GetDocumentFolderPermissionsEntity"
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetDocumentFolderPermissionsEntity" : {
      "type" : "object",
      "required" : [ "documentCreate", "documentDelete", "documentEdit", "documentFolderCreate", "documentFolderDelete", "documentFolderEdit", "documentFolderView", "documentView" ],
      "properties" : {
        "documentFolderCreate" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "documentFolderEdit" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "documentFolderDelete" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "documentFolderView" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "documentCreate" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "documentEdit" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "documentDelete" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "documentView" : {
          "type" : "boolean",
          "readOnly" : true
        }
      }
    },
    "GetDocumentFoldersEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GetDocumentFolderEntity"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetDocumentsAndFoldersEntity" : {
      "type" : "object",
      "properties" : {
        "folders" : {
          "description" : "Folders",
          "readOnly" : true,
          "$ref" : "#/definitions/listDocumentFolders"
        },
        "documents" : {
          "description" : "Documents",
          "readOnly" : true,
          "$ref" : "#/definitions/ListCustomDetailedDocumentEntity"
        },
        "docOffset" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "DocumentOffset",
          "readOnly" : true
        },
        "folderOffset" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "FolderOffset",
          "readOnly" : true
        },
        "docTotalCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "docTotalCount",
          "readOnly" : true
        },
        "docFolderTotalCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "docFolderTotalCount",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model for showing the documents and folders details"
    },
    "GetDocumentsEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GetDocumentEntity"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "GetDocumentsPreference" : {
      "type" : "object",
      "required" : [ "newDocumentsView" ],
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "newDocumentsView" : {
          "type" : "boolean",
          "description" : "Boolean flag that decides NewDocumentsView is true/false",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to represent Documents preference"
    },
    "GetField" : {
      "type" : "object",
      "required" : [ "fieldValues", "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "Name",
          "readOnly" : true
        },
        "folderId" : {
          "type" : "string",
          "description" : "Folder ID",
          "readOnly" : true
        },
        "memberName" : {
          "type" : "string",
          "description" : "Member name",
          "readOnly" : true
        },
        "valueType" : {
          "type" : "string",
          "description" : "Value Type",
          "readOnly" : true
        },
        "displaySize" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Display Size",
          "readOnly" : true
        },
        "displayLines" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Display lines",
          "readOnly" : true
        },
        "displayType" : {
          "type" : "string",
          "description" : "Display type",
          "readOnly" : true
        },
        "parentField" : {
          "type" : "string",
          "description" : "Parent field",
          "readOnly" : true
        },
        "isRequired" : {
          "type" : "boolean",
          "description" : "Is required",
          "readOnly" : true
        },
        "isDisabled" : {
          "type" : "boolean",
          "description" : "Is Disabled",
          "readOnly" : true
        },
        "isHiddenOnCreate" : {
          "type" : "boolean",
          "description" : "Is hidden on create",
          "readOnly" : true
        },
        "fieldValues" : {
          "description" : "Field Values",
          "readOnly" : true,
          "$ref" : "#/definitions/listFieldValues"
        },
        "defaultTextValue" : {
          "type" : "string",
          "description" : "Default Text Value",
          "readOnly" : true
        },
        "helpText" : {
          "type" : "string",
          "description" : "Help Text",
          "readOnly" : true
        },
        "pattern" : {
          "type" : "string",
          "description" : "Pattern",
          "readOnly" : true
        },
        "userFilter" : {
          "type" : "string",
          "description" : "userFilter",
          "readOnly" : true
        },
        "userKeys" : {
          "type" : "string",
          "description" : "userKeys",
          "readOnly" : true
        },
        "dateCreated" : {
          "type" : "string",
          "format" : "date",
          "description" : "Date Created",
          "readOnly" : true
        },
        "createdBy" : {
          "type" : "string",
          "description" : "Created By",
          "readOnly" : true
        },
        "dateLastModified" : {
          "type" : "string",
          "format" : "date",
          "description" : "Date Last Modified",
          "readOnly" : true
        },
        "lastModifiedBy" : {
          "type" : "string",
          "description" : "Last Modified By",
          "readOnly" : true
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Version",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to describe field details"
    },
    "GetFieldValue" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Id",
          "readOnly" : true
        },
        "value" : {
          "type" : "string",
          "description" : "Value",
          "readOnly" : true
        },
        "valueClass" : {
          "type" : "string",
          "description" : "Value Class",
          "readOnly" : true
        },
        "isDefault" : {
          "type" : "boolean",
          "description" : "Is Default",
          "readOnly" : true
        },
        "visible" : {
          "type" : "boolean",
          "description" : "Visible",
          "readOnly" : true
        },
        "displayOrder" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Display Order",
          "readOnly" : true
        },
        "dependentValues" : {
          "type" : "array",
          "description" : "Dependent Values",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to describe field value details"
    },
    "GetFolderLayout" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "Folder Layout Key",
          "readOnly" : true
        },
        "folderKey" : {
          "type" : "string",
          "description" : "Folder Key",
          "readOnly" : true
        },
        "fieldName" : {
          "type" : "string",
          "description" : "Field Name",
          "readOnly" : true
        },
        "fieldLabel" : {
          "type" : "string",
          "description" : "Field Label",
          "readOnly" : true
        },
        "displayOrder" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Display Order",
          "readOnly" : true
        },
        "fieldId" : {
          "type" : "string",
          "description" : "Field Id",
          "readOnly" : true
        },
        "fieldType" : {
          "type" : "string",
          "description" : "Field Type",
          "readOnly" : true
        },
        "fieldDO" : {
          "description" : "Field DO",
          "readOnly" : true,
          "$ref" : "#/definitions/GetField"
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to describe folder layout"
    },
    "GetReviewersEntity" : {
      "type" : "object",
      "properties" : {
        "reviewers" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to represent documents default reviewers for the project"
    },
    "GuidKey" : {
      "type" : "object",
      "properties" : {
        "prefix" : {
          "type" : "string"
        },
        "guid" : {
          "type" : "string"
        }
      }
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "href" : {
          "type" : "string",
          "readOnly" : true
        },
        "method" : {
          "type" : "string",
          "readOnly" : true
        },
        "templated" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "type" : {
          "type" : "string",
          "readOnly" : true
        }
      }
    },
    "List User" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/User"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model describes the list of user details"
    },
    "ListCustomDetailedDocumentEntity" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/CustomDetailedDocument"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      }
    },
    "ListFolderLayout" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GetFolderLayout"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to describe the folder layout list"
    },
    "ListFolderWorkflows" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Folder"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to describe about list of folder workflows"
    },
    "MoveDocumentsEntity" : {
      "type" : "object",
      "properties" : {
        "documentIds" : {
          "type" : "array",
          "description" : "Document IDs",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to take multiple document id"
    },
    "NamedValue" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "PatchChildField" : {
      "type" : "object",
      "required" : [ "fieldName" ],
      "properties" : {
        "fieldName" : {
          "type" : "string",
          "description" : "Field Name",
          "readOnly" : true
        },
        "parentFieldId" : {
          "type" : "string",
          "description" : "Parent Field Id",
          "readOnly" : true
        },
        "fieldValues" : {
          "type" : "object",
          "description" : "FieldValues",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "childParentFieldValues" : {
          "type" : "object",
          "description" : "ChildParentFieldValues",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "isRequired" : {
          "type" : "boolean",
          "description" : "IsRequired",
          "readOnly" : true
        },
        "isDisabled" : {
          "type" : "boolean",
          "description" : "IsDisabled",
          "readOnly" : true
        },
        "isHiddenOnCreate" : {
          "type" : "boolean",
          "description" : "IsHiddenOnCreate",
          "readOnly" : true
        },
        "defaultFieldValue" : {
          "type" : "string",
          "description" : "DefaultFiledValue",
          "readOnly" : true
        },
        "helpText" : {
          "type" : "string",
          "description" : "Help Text",
          "readOnly" : true
        }
      },
      "description" : "Model to create a child field"
    },
    "PatchDocument" : {
      "type" : "object",
      "properties" : {
        "currentVersion" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "status" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileName" : {
          "type" : "string",
          "readOnly" : true
        },
        "mimeType" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileId" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileUrl" : {
          "type" : "string",
          "readOnly" : true
        },
        "saveAndIgnoreURLError" : {
          "type" : "boolean",
          "description" : "Allow document url to save with errors",
          "readOnly" : true
        },
        "versionComment" : {
          "type" : "string",
          "readOnly" : true
        },
        "associationId" : {
          "type" : "string",
          "readOnly" : true
        },
        "associationDescription" : {
          "type" : "string",
          "readOnly" : true
        },
        "lockBy" : {
          "type" : "string",
          "readOnly" : true
        },
        "downloadRestricted" : {
          "type" : "boolean",
          "description" : "Prevent others from downloading",
          "readOnly" : true
        },
        "allowForceUnlock" : {
          "type" : "boolean",
          "description" : "Allow document admins to edit (when locking a document, this is true by default when omitted)",
          "readOnly" : true
        },
        "flexFields" : {
          "type" : "array",
          "description" : "Flex fields",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/FlexField"
          }
        },
        "textContent" : {
          "type" : "string",
          "readOnly" : true
        },
        "tagIds" : {
          "type" : "array",
          "description" : "Tags",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to update a document"
    },
    "PatchDocumentFolder" : {
      "type" : "object",
      "properties" : {
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model to update a document folder"
    },
    "PatchField" : {
      "type" : "object",
      "required" : [ "fieldName" ],
      "properties" : {
        "fieldName" : {
          "type" : "string",
          "description" : "Field Name",
          "readOnly" : true
        },
        "displaySize" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Display Size",
          "readOnly" : true
        },
        "displayLines" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Display Lines",
          "readOnly" : true
        },
        "isRequired" : {
          "type" : "boolean",
          "description" : "Is Required",
          "readOnly" : true
        },
        "isDisabled" : {
          "type" : "boolean",
          "description" : "Is Disabled",
          "readOnly" : true
        },
        "isHiddenOnCreate" : {
          "type" : "boolean",
          "description" : "Is Hidden on create",
          "readOnly" : true
        },
        "fieldValues" : {
          "type" : "array",
          "description" : "Field Values",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/FieldValue"
          }
        },
        "parentFieldId" : {
          "type" : "string",
          "description" : "parentFieldId",
          "readOnly" : true
        },
        "defaultUsers" : {
          "type" : "array",
          "description" : "Default users",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "defaultTextValue" : {
          "type" : "string",
          "description" : "defaultTextValue",
          "readOnly" : true
        },
        "userFilter" : {
          "type" : "string",
          "description" : "User filter",
          "readOnly" : true,
          "enum" : [ "user_proj_member", "user_all" ]
        },
        "helpText" : {
          "type" : "string",
          "description" : "Help Text",
          "readOnly" : true
        },
        "pattern" : {
          "type" : "string",
          "description" : "Pattern",
          "readOnly" : true
        }
      },
      "description" : "Model to update field"
    },
    "PatchFolderLayoutDisplayOrder" : {
      "type" : "object",
      "properties" : {
        "folderLayoutIds" : {
          "type" : "array",
          "description" : "Folder Layout Ids",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to update the folder layout display order"
    },
    "PatchReviewers" : {
      "type" : "object",
      "properties" : {
        "reviewers" : {
          "type" : "array",
          "description" : "Default reviewers User Ids",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to update the default document reviewers"
    },
    "PostChildField" : {
      "type" : "object",
      "required" : [ "fieldName" ],
      "properties" : {
        "fieldName" : {
          "type" : "string",
          "description" : "Field Name",
          "readOnly" : true
        },
        "fieldValues" : {
          "type" : "array",
          "description" : "FieldValues",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "childParentFieldValues" : {
          "type" : "object",
          "description" : "ChildParentFieldValues",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "helpText" : {
          "type" : "string",
          "description" : "Help Text",
          "readOnly" : true
        },
        "isRequired" : {
          "type" : "boolean",
          "description" : "IsRequired",
          "readOnly" : true
        },
        "isDisabled" : {
          "type" : "boolean",
          "description" : "IsDisabled",
          "readOnly" : true
        },
        "isHiddenOnCreate" : {
          "type" : "boolean",
          "description" : "IsHiddenOnCreate",
          "readOnly" : true
        },
        "defaultFieldValue" : {
          "type" : "string",
          "description" : "DefaultFiledValue",
          "readOnly" : true
        }
      },
      "description" : "Model to create a child field"
    },
    "PostDocument" : {
      "type" : "object",
      "required" : [ "description", "fileId", "fileName", "mimeType", "status", "title" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        },
        "status" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileName" : {
          "type" : "string",
          "readOnly" : true
        },
        "mimeType" : {
          "type" : "string",
          "readOnly" : true
        },
        "fileId" : {
          "type" : "string",
          "readOnly" : true
        },
        "versionComment" : {
          "type" : "string",
          "readOnly" : true
        },
        "associationId" : {
          "type" : "string",
          "readOnly" : true
        },
        "associationDescription" : {
          "type" : "string",
          "readOnly" : true
        },
        "createLocked" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "createDownloadRestricted" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "allowForceUnlock" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "flexFields" : {
          "type" : "array",
          "description" : "Flex fields",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/FlexField"
          }
        },
        "tagIds" : {
          "type" : "array",
          "description" : "Tags",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "urlContent" : {
          "type" : "string",
          "readOnly" : true
        },
        "saveAndIgnoreURLError" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "textContent" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model to create a document"
    },
    "PostDocumentFolder" : {
      "type" : "object",
      "required" : [ "title" ],
      "properties" : {
        "title" : {
          "type" : "string",
          "readOnly" : true
        },
        "description" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model to create a document folder"
    },
    "PostDocumentsEntity" : {
      "type" : "object",
      "properties" : {
        "copyFromIds" : {
          "type" : "array",
          "description" : "Copy document IDs",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to take multiple document ids"
    },
    "PostDocumentsResponse" : {
      "type" : "object",
      "properties" : {
        "successIds" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "getfailureMap" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        },
        "newDocIds" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model describes the document ids which are successful/failure of POST operation"
    },
    "PostField" : {
      "type" : "object",
      "required" : [ "fieldDisplayType", "fieldName" ],
      "properties" : {
        "fieldName" : {
          "type" : "string",
          "description" : "Field Name"
        },
        "fieldDisplayType" : {
          "type" : "string",
          "description" : "Field Display Type",
          "readOnly" : true,
          "enum" : [ "TEXT", "DROPDOWN", "MULTISELECT", "DATE", "USER" ]
        },
        "displaySize" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Display Size"
        },
        "displayLines" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Display Lines"
        },
        "isRequired" : {
          "type" : "boolean",
          "description" : "Is Required"
        },
        "isDisabled" : {
          "type" : "boolean",
          "description" : "Is Disabled"
        },
        "isHiddenOnCreate" : {
          "type" : "boolean",
          "description" : "Is Hidden on create"
        },
        "fieldValues" : {
          "type" : "array",
          "description" : "Field Values",
          "items" : {
            "$ref" : "#/definitions/FieldValue"
          }
        },
        "helpText" : {
          "type" : "string",
          "description" : "Help Text"
        },
        "pattern" : {
          "type" : "string",
          "description" : "Pattern"
        },
        "defaultUsers" : {
          "type" : "array",
          "description" : "Default users",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "defaultTextValue" : {
          "type" : "string",
          "description" : "Default Text Value",
          "readOnly" : true
        },
        "userFilter" : {
          "type" : "string",
          "description" : "User filter",
          "readOnly" : true,
          "enum" : [ "user_proj_member", "user_all" ]
        }
      },
      "description" : "Model to create a new field"
    },
    "PostLayoutSeparator" : {
      "type" : "object",
      "required" : [ "separatorLabel", "separatorType" ],
      "properties" : {
        "separatorLabel" : {
          "type" : "string",
          "description" : "Separator Label"
        },
        "separatorType" : {
          "type" : "string",
          "description" : "Separator Type",
          "readOnly" : true,
          "enum" : [ "sectionSeparator", "columnSeparator", "rowSeparator" ]
        }
      },
      "description" : "Model to create a layout separator"
    },
    "PostMonitoringUsers" : {
      "type" : "object",
      "required" : [ "users" ],
      "properties" : {
        "users" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to add monitoring users"
    },
    "PostRootDocumentFolderTree" : {
      "type" : "object",
      "properties" : {
        "openedFolderIds" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "openedFolderPaths" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to specify the options for retrieving root document folder tree"
    },
    "PutDocumentsAndFolders" : {
      "type" : "object",
      "required" : [ "foldersAndDocuments" ],
      "properties" : {
        "foldersAndDocuments" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model to move/delete documents & folders"
    },
    "PutDocumentsAndFoldersResponse" : {
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string",
          "readOnly" : true
        },
        "results" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "errorCode" : {
          "type" : "string",
          "readOnly" : true
        }
      },
      "description" : "Model describes the document and folder ids which are failure of PUT operation"
    },
    "PutDocumentsResponse" : {
      "type" : "object",
      "properties" : {
        "successIds" : {
          "type" : "array",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "failureMap" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "array",
            "uniqueItems" : true,
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "description" : "Model describes the document ids which are successful/failure of PUT operation"
    },
    "RequiredFields" : {
      "type" : "object",
      "properties" : {
        "parentFieldId" : {
          "type" : "string",
          "description" : "ParentFieldId",
          "readOnly" : true
        },
        "childrenIds" : {
          "type" : "array",
          "description" : "ChildrenIds",
          "readOnly" : true,
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string",
          "description" : "Name",
          "readOnly" : true
        },
        "value" : {
          "type" : "string",
          "description" : "Value",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model for Required Fields"
    },
    "SimpleUserData" : {
      "type" : "object",
      "properties" : {
        "userId" : {
          "type" : "string"
        },
        "userName" : {
          "type" : "string"
        },
        "fullName" : {
          "type" : "string"
        }
      }
    },
    "UpdateDocumentsPreference" : {
      "type" : "object",
      "required" : [ "newDocumentsView" ],
      "properties" : {
        "newDocumentsView" : {
          "type" : "boolean",
          "description" : "Boolean flag to update NewDocumentsView is true/false"
        }
      },
      "description" : "Model to update Documents user preference"
    },
    "User" : {
      "type" : "object",
      "required" : [ "fullname", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "User id",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "User name",
          "readOnly" : true
        },
        "fullname" : {
          "type" : "string",
          "description" : "User fullname",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model describes the user details"
    },
    "UserDocumentReview" : {
      "type" : "object",
      "required" : [ "createdBy", "createdByFullname", "documentId", "dueDate", "id", "projectPath", "projectTitle", "respondedReviewerCount", "reviewerCount", "title" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "TeamForge Id",
          "readOnly" : true
        },
        "title" : {
          "type" : "string",
          "description" : "Document title",
          "readOnly" : true
        },
        "documentId" : {
          "type" : "string",
          "description" : "Document id",
          "readOnly" : true
        },
        "dueDate" : {
          "type" : "string",
          "format" : "date-time",
          "readOnly" : true
        },
        "projectPath" : {
          "type" : "string",
          "readOnly" : true
        },
        "projectTitle" : {
          "type" : "string",
          "readOnly" : true
        },
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "createdBy" : {
          "type" : "string",
          "description" : "Created by username",
          "readOnly" : true
        },
        "createdByFullname" : {
          "type" : "string"
        },
        "reviewerCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "respondedReviewerCount" : {
          "type" : "integer",
          "format" : "int32"
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Document review created by/assigned to a user"
    },
    "UserDocumentReviews" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/UserDocumentReview"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "pageSize" : {
          "type" : "integer",
          "format" : "int32",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "User document review collection"
    },
    "listDocumentFolders" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/DetailedDocumentFolder"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to describe about list of document folders"
    },
    "listFieldValues" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GetFieldValue"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to describe about list of field values"
    },
    "listFields" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/GetField"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to describe about list of field"
    },
    "listRequiredFields" : {
      "type" : "object",
      "properties" : {
        "_links" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/Link"
          }
        },
        "items" : {
          "type" : "array",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/RequiredFields"
          }
        },
        "paged" : {
          "type" : "boolean",
          "readOnly" : true
        },
        "_embedded" : {
          "type" : "object",
          "readOnly" : true,
          "additionalProperties" : {
            "$ref" : "#/definitions/AbstractEntity"
          }
        }
      },
      "description" : "Model to describe about list of required field"
    }
  }
}